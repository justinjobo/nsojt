#!/usr/bin/env bash

FULLCMD="$0 $@"
BINPATH=($(dirname $0))


function usage()
{
    cat <<EOF
Usage: ncs-setup --dest DIR [options]

Setup an initial NCS instance, optionally pre-configured with a set
of managed devices.

Options:
  -h, --help            Show this help message and exit.

  --package PACKAGE     Add PACKAGE to the set of packages loaded by
                        NCS at startup.  This option can be given multiple
                        times. PACKAGE can be a directory or just the name
                        of one of the builtin NED packages.

  --netsim-dir DIR      Pre-configure the list of managed devices with
                        the simulated network found in DIR.  See
                        ncs-netsim for more information.

  --force-generic       Generic devices used in a simulated network will
                        normally be run as netconf devices. Use this
                        option if the devices should be forced to be
                        run as generic devices.

  --no-netsim           By default, ncs-setup searches upward in the
                        directory hierarchy for a netsim directory.

  --dest DIR            Directory where the NCS instance is created.

  --eclipse-setup       Populate .classpath and .project making the
                        dest directory appropriate for eclipse development

  --reset               Stop NCS and reset NCS to factory defaults.

  --generate-ssh-keys   Generate new ssh keys instead of using
                        the keys in \${NCS_DIR}/etc/ncs/ssh.
                        This is useful so that the ssh keys don't change
                        when a new NCS release is installed

  --use-copy            Copy NED packages instead of creating symbolic links
                        in the ./packages directory


EOF
}


function abspath() {
    if [[ -d "$1" ]]; then
        pushd "$1" >/dev/null
        pwd -P
        popd >/dev/null
    elif [[ -e $1 ]]; then
        pushd $(dirname $1) >/dev/null
        echo `pwd -P`/$(basename $1)
        popd >/dev/null
    else
        echo $1 does not exist! >&2
        return 127
    fi
}




function is_not_dir() {
    if [ ! -d $1 ]; then
        return 1
    else
        return 0
    fi
}

function error()
{
    if [ ! -z "$1" ]; then
        echo >&2
        echo >&2 "*** $1"
    fi
    echo >&2 " Try ncs-setup --help or man ncs-setup to get usage text"
    exit 1
}


function has-tag() {
    local packdir=$1
    local tag=$2

    get-package-meta-data ${packdir}  | grep "<${tag}>" > /dev/null
    local r1=$?
    get-package-meta-data ${packdir}  | grep "</${tag}>" > /dev/null
    local r2=$?
    get-package-meta-data ${packdir}  | grep "<${tag}/>" > /dev/null
    local r3=$?
    if [ $r1 = 0 -a $r2 = 0 ]; then
        return 0;
    elif [ $r3 = 0 ]; then
        return 0;
    else
        return 1
    fi
}



function ned-type() {
    local packdir=$1
    if has-tag ${packdir} cli; then
        echo cli
    elif has-tag ${packdir} snmp; then
        echo snmp
    elif has-tag ${packdir} generic; then
        echo generic
    elif has-tag ${packdir} netconf; then
        echo netconf
    else
        echo none
    fi
}



# usage: relpath from to
function relpath() {

    if [[ "$1" == "$2" ]]
      then
      echo "."
      exit
    fi

    IFS="/"

    current=($1)
    absolute=($2)
    abssize=${#absolute[@]}
    cursize=${#current[@]}

    while [[ ${absolute[level]} == ${current[level]} ]]
    do
      (( level++ ))
      if (( level > abssize || level > cursize ))
        then
        break
      fi
    done

    for ((i = level; i < cursize; i++))
      do
      if ((i > level))
        then
        newpath=$newpath"/"
      fi
      newpath=$newpath".."
    done

    for ((i = level; i < abssize; i++))
    do
        if [[ -n $newpath ]]
        then
        newpath=$newpath"/"
      fi
      newpath=$newpath${absolute[i]}
    done
    echo "$newpath"
}


function smkdir() {
    mkdir -p $1 2>&1 > /dev/null || true
}

function get-package-meta-data() {
    local packsrc=$1
    if [[ $packsrc == *.tar.gz ]]; then
        local tar_wildcard_flag
        if [[ $(tar --version) =~ "GNU tar" ]]; then
            tar_wildcard_flag=--wildcards
        fi
        tar $tar_wildcard_flag -xOzf $packsrc */package-meta-data.xml
    else
        cat ${packsrc}/package-meta-data.xml
    fi
}

function get-ned-id() {
    local packdir=$1
    local id=`get-package-meta-data ${packdir} | grep ned-id`
    echo ${id}
}

dp=0
reset=false
netsimdir=
use_copy=false
nonetsim=false
force_generic=""

while [ $# -gt 0 ]; do
    arg="$1"
    shift
    case "$arg" in
        -h|--help|help)
            usage
            exit 0;;
        --eclipse-setup)
            eclipse=true;;
        --package|--ned-package)
            dpacks[$dp]=$1;
            absdpacks[$dp]=`abspath $1 2>/dev/null`
            dp=$(($dp+1))
            shift;;
        --no-netsim)
            nonetsim=true;;
        --netsim-dir)
           netsimdir=$1
           if [ ! -f ${netsimdir}/.netsiminfo ]; then
               error "--netsim-dir must point to a proper netsim directory"
           fi
           shift;;
        --force-generic)
            force_generic="--force-generic"
            ;;
        --dest)
            dest=$1;
            shift;;
        --reset)
            reset=true
            ;;
        --generate-ssh-keys)
            ssh_keys=true
            ;;
        --use-copy)
            use_copy=true;;
        *)
            error "Unknown arg $arg"
    esac
done


p=`pwd -P`
if [ -z "${dest}" ]; then
    if [ "$reset" = "true" ] || [ "$eclipse" = "true" ]; then
        dest="."
    else
        echo "Error: Must supply a destination directory!"
        echo "       (use \"--dest .\" to do setup in current directory)"
        exit 1
    fi
elif [ ! -d "$dest" ]; then
    mkdir -p ${dest}
    if [ ! $? = 0 ]; then
        error "Cannot mkdir $dest";
    fi
fi

absdest=($(abspath  $dest))
reldest=($(relpath . $absdest))


#
# Use ncs-netsim to find/verify netsim directory
#
if [ $nonetsim = true ]; then
    true;
elif [ -z "${netsimdir}" ]; then
    absnetsimdir=`ncs-netsim whichdir 2>/dev/null`
    netsimdir=${absnetsimdir}
else
    absnetsimdir=`ncs-netsim --dir "${netsimdir}" whichdir 2>/dev/null`
    if [ -z "${absnetsimdir}" ]; then
        error "Specified netsim dir doesn't exist"
    fi
fi



function netsim_readme() {
cat <<EOF

This is a directory for running NCS. The initialization files have
been generated from running towards netsim project defined
in ${absnetsimdir}

The directory content in ${dest} has been generated through
the invocation of

# $FULLCMD

The devices in that netsim directory are

EOF

ddsz=${#devices[@]}
for ((k=0; k<$ddsz; k++)); do
    local name=${devices[${k}]}
    local abs_pdir=${abspackagedirs[$k]}
    local ntype=($(ned-type $abs_pdir))
    case $ntype in
        cli)
            echo ${name}    CLI/${cli_ssh_port[${k}]};;
        snmp)
            echo ${name}    SNMP/${snmp_port[${k}]};;
        netconf)
            echo ${name}    NETCONF/${netconf_ssh_port[${k}]};;
        *)
            true
    esac
done

cat <<EOF


- To start the emulated network, go there and do ncs-netsim start | help
  If the netsim directory for the emulated network resides above here
  the ncs-netsim command will search upwards in the directory
  hierarchy to search for the netsim directory.

- To start NCS, do

    # ncs  [--verbose --foreground]

- To stop NCS, do

    # ncs --stop

- To get a regular CLI into NCS, do

    # ncs_cli -u admin

- To restart NCS from scratch,

   # ncs-setup --reset

    this will ensure NCS is reinitialized from the ncs-cdb/*.xml files
    when restarted

- To restart the netsim network from scratch, do

    # ncs-netsim stop
    # ncs-netsim reset
    # ncs-netsim start

        or in one swoop

    # ncs-netsim restart

EOF
}


function netsim_setup() {

    cd ${absnetsimdir}
    . ./.netsiminfo
    cd $absdest


    ${BINPATH}/ncs-netsim --dir ${absnetsimdir} ${force_generic} \
         ncs-xml-init > ncs-cdb/netsim_devices_init.xml

    ddsz=${#devices[@]}
    smkdir packages

    for ((k=0; k<$ddsz; k++)); do
        abs_pdir=${abspackagedirs[$k]}
        rel_pdir=${packagedirs[$k]}
        ntype=($(ned-type $abs_pdir))

        linkname=($(basename ${abs_pdir}))

        ## Trick here to concatenate two relative links
        ## Into one relative link
        rel=($(relpath `pwd -P`/packages $absnetsimdir))
        rel2=${rel}/${rel_pdir}
        # rel3=`dirname $rel2`/$linkname
        # echo "XXX ln -sf $rel2 packages/$linkname "
        ## Do not link if it already exist
        if [ ! -e  packages/$linkname ]; then
            if [ $use_copy = false ]; then
                ln -s $rel2 packages/$linkname
                if [ ! $? = 0 ]; then
                    error "Failed to   ln -sf $rel2 packages/$linkname "
                fi
            else
                cp -RLp ${abs_pdir} packages
                if [ ! $? = 0 ]; then
                    error "failed to copy ${abs_pdir}"
                fi
            fi
        fi
    done

    netsim_readme > README.netsim
}


function eclipse_setup() {

    PROJNAME=`basename $absdest`
    cd $absdest

#
# create .project if it does not exist
#


    if [ ! -f .project ]; then
        echo Generate ${absdest}/.project
        cat > .project <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<projectDescription>
  <name>${PROJNAME}</name>
  <comment>autosetup NCS project</comment>
  <projects>
  </projects>
  <buildSpec>
    <buildCommand>
      <name>org.eclipse.jdt.core.javabuilder</name>
        <arguments>
        </arguments>
    </buildCommand>
  </buildSpec>
  <natures>
    <nature>org.eclipse.jdt.core.javanature</nature>
  </natures>
</projectDescription>

EOF
    fi
#
# create .classpath
#

# first check if .classpath already exists
# some paths can be user defined project refs we try to keep these
    cpfile=/tmp/ncs-eclipse-classpath.$$
    if [ -f .classpath ]; then
        grep "combineaccessrules=\"false\" kind=\"src\" path=\"/" .classpath \
            > $cpfile;
    fi


    ncs_jar=${NCS_DIR}/java/jar/ncs.jar
    ncs_source=${NCS_DIR}/java/jar/ncs-src.jar
    confd_jar=${NCS_DIR}/java/jar/conf-api.jar
    confd_source=${NCS_DIR}/java/jar/conf-api-src.jar

    echo Generate ${absdest}/.classpath
    cat > .classpath <<EOF2
<?xml version="1.0" encoding="UTF-8"?>
<classpath>
  <classpathentry
     kind="con"
     path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
  <classpathentry
     kind="con"
     path="org.eclipse.jdt.junit.JUNIT_CONTAINER/3"/>
  <classpathentry kind="output" path="bin"/>
EOF2



    for i in `find . -maxdepth 3 -follow -name package-meta-data.xml`
    do
        packagedir=`dirname $i`

        if [ -d ${packagedir}/src/java/src ]; then
            echo "  <classpathentry kind=\"src\"">> .classpath
            echo "     path=\"${packagedir}/src/java/src\"/>" >> .classpath;
        fi
    done

    if [ -f $cpfile ]; then
        cat $cpfile >> .classpath;
        rm -f $cpfile
    fi

    cat >> .classpath <<EOF3
  <classpathentry
       kind="lib"
       path="${ncs_jar}"
       sourcepath="${ncs_source}"/>
  <classpathentry
    kind="lib"
    path="${confd_jar}"
    sourcepath="${confd_source}"/>

EOF3


    for i in `find $NCS_DIR/java/jar -not -regex ".*\/jar/ncs.*" \
                                     -and -not -regex ".*\/jar/conf.*" \
                                     -and -regex ".*\.jar$"`
    do
        cat >> .classpath <<EOF
  <classpathentry
     kind="lib"
     path="${i}"/>
EOF
    done


    for i in `find . -maxdepth 3 -follow -name package-meta-data.xml`
    do
        packagedir=`dirname $i`
        if [ -d ${packagedir}/shared-jar ]; then
            for j in `find ${packagedir}/shared-jar -follow \
                         -regex ".*\/shared-jar/.*\.jar"`
            do
                cat >> .classpath <<EOF
  <classpathentry
    kind="lib"
     path="${j}"/>
EOF
            done
        fi
    done
    echo "</classpath>" >> .classpath
}


function ncs_setup_readme() {
    cat > README.ncs <<EOF
This directory is an NCS project directory.

The directory content in ${dest} has been generated through
the invocation of:

# $FULLCMD

The following commands can be used to interact with NCS in this directory:

# ncs -c ./ncs.conf                         -- to start NCS as a daemon
# ncs -c ./ncs.conf --foreground --verbose  -- start NCS in foregound
# ncs --stop                                -- stop NCS
# ncs_cli -u admin                          -- start a CLI into NCS
# ncs-setup --eclipse-setup                 -- create eclipse dev files here

EOF
}


function ned_setup() {
    builtins=($(ls ${NCS_DIR}/packages/neds))
    for ((k=0; k<$dp; k++)); do
        dir=${dpacks[$k]}
        bsz=${#builtins[@]}
        unset builtin
        for ((b=0; b<$bsz; b++)); do
            if [ $dir = ${builtins[$b]} ]; then
                # special syntax, just to give name of the builtin ned
                ## Do not link if it already exist
                if [ ! -e  packages/${dir} ]; then
                    if [ $use_copy = false ]; then
                        ln -s  ${NCS_DIR}/packages/neds/${dir} packages/${dir}
                    else
                        cp -RLp ${NCS_DIR}/packages/neds/${dir} packages
                    fi
                fi
                builtin=true
            fi
        done
        if [ -z "$builtin" ]; then
            PKG="packages/`basename $dir`"
            case $dir in
                /*)
                    if [ ! -e  ${PKG} ]; then
                        if [ $use_copy = false ]; then
                            ln -s $dir ${PKG}
                        else
                            cp -RLp $dir packages
                        fi
                    fi ;;
                *)
                    adir=${absdpacks[$k]}
                    if [ ! -e  ${PKG} ]; then
                        if [ $use_copy = false ]; then
                            ln -s $adir ${PKG}
                        else
                            cp -RLp $adir packages
                        fi
                    fi ;;
            esac
        fi
    done
}


## macos sed -i requires templ arg
function sedi() {
    sed $1 $2 > tmp.$$
    mv tmp.$$ $2
}


function mk_dirs() {
    smkdir ncs-cdb
    smkdir logs
    smkdir state
    smkdir packages
    smkdir scripts
    smkdir scripts/command
    smkdir scripts/post-commit
}

startdir=`pwd -P`
cd ${absdest}

if [ "$eclipse" = true ]; then
    eclipse_setup
elif [ "$reset" = true ]; then
    ncs --stop > /dev/null 2>&1
    rm -rf ncs-cdb/*.cdb ncs-cdb/rollback* logs/* state/*
else
    mk_dirs
    # use the default ncs.conf
    cp $NCS_DIR/etc/ncs/ncs.conf .
    chmod +w ncs.conf
    if [ "$ssh_keys" = true ]; then
        sk=ssh-server-key-dir
        sed  "s|.*${sk}.*|    <${sk}>./ssh</${sk}>|" < ncs.conf > ncs.conf.$$
        mv ncs.conf.$$ ncs.conf
        rm -rf ssh 2>/dev/null || true
        mkdir ssh
        ssh-keygen -t ed25519 -f ssh/ssh_host_ed25519_key -N ''
    fi

    if [ ! -z "$netsimdir" ]; then
        echo "Using netsim dir ${netsimdir}"
        netsim_setup
    fi
    if [ "$dp" != 0 ]; then
        ned_setup
    fi
    ncs_setup_readme
fi

exit 0
