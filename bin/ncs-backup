#!/bin/sh

usage()
{
    cat <<EOF

Usage: ncs-backup [options]

Take a backup of NCS CDB, state data, and config files for an NCS
installation done with the --system-install option to the NCS
installer. Alternatively, take a backup of the above-mentioned files
from an NCS local installation.
The backup is stored in the RunDir/backups directory.

Usage: ncs-backup --restore [Backup] [options]

Restore a backup created by the first version of the command.

Note that it is not supported to restore a backup from a local installation
to a system installation, and vice versa.

When restoring a system installation backup,
the Backup argument is either the name of a file in the
RunDir/backups directory or the full path to a backup file.

When restoring a local installation backup, the full path to the backup
file must be given. Also in this case, --install-dir will need to point
to a directory in which the local installation backup will be extracted.

In the case of restoring a system installation, if
the argument is omitted, unless the --non-interactive option is
given, the command will offer selection from available backups.


Options:

--install-dir InstallDir  Specifies the directory for installation of NCS
                          static files, like the --install-dir option to
                          the installer. Default: /opt/ncs.

--non-interactive         If this option is used, restore will proceed without
                          asking for confirmation.

--no-compress             If this option is used, the backup will not be
                          compressed (default is compressed). The restore will
                          uncompress if the backup is compressed, regardless
                          of this option.

EOF
    exit 0
}

log_no_echo()
{
    if [ -d "$NCS_RUN_DIR" ]; then
        echo "$(date)" "$1" >> "$NCS_RUN_DIR/INSTALLATION-LOG"
    fi
}

log()
{
    echo "$1"
    log_no_echo "$1"
}

error_no_log()
{
    echo "ERROR ** $1"
    exit 1
}

error()
{
    log "ERROR ** $1"
    exit 1
}

usage_error()
{
    echo "ERROR ** $1"
    echo "Try $0 --help to get usage text"
    exit 1
}

abspath()
{
    case "$1" in
        /*) echo "$1" ;;
        *) echo "$(pwd -P)/$1" ;;
    esac
}

# set $reply to yes/no
ask()
{
    if [ "$interactive" = "yes" ]; then
        while true; do
            echo "$1 (y/n)? " | tr -d '\012'
            read -r reply
            case "$reply" in
                [Yy]|[Yy][Ee][Ss])
                    reply="yes"
                    return
                    ;;
                [Nn]|[Nn][Oo])
                    reply="no"
                    return
                    ;;
                *)
                    echo "Answer not understood"
                    ;;
            esac
        done
    else
        reply="yes"
    fi
}

# test -e is not portable
exists() # file/dir/symlink
{
    test -f "$1" -o -d "$1" -o -L "$1"
}

check_run_dir_local()
{
    cdbdir=$(eval "ncs_conf_tool -r ncs-config cdb db-dir < $local_conf_file")
    # fallback value
    if [ "$cdbdir" = "" ]; then
        cdbdir="ncs-cdb"
    fi
    statedir=$(eval "ncs_conf_tool -r ncs-config state-dir < $local_conf_file")
    # fallback value:
    if [ "$statedir" = "" ]; then
        cdbdir="state"
    fi
    for d in "$cdbdir" "$statedir"; do
        if [ ! -d "$d" ]; then
            log "Directory $d does not exist"
            return 1
        fi
    done
    return 0
}

check_run_dir()
{
    for d in cdb state packages streams; do
        if [ ! -d "$d" ]; then
            log "Directory $d does not exist"
            return 1
        fi
    done
    return 0
}

backup()
{
    cd "$NCS_CONFIG_DIR" || \
        error_no_log "Failed to change directory to $NCS_CONFIG_DIR"
    config_tar="$NCS_RUN_DIR/config_dir.tar"
    date="$(date +%Y-%m-%dT%H:%M:%S)"
    basename="$backup_dir/$current@$date"
    tmp_file=$(mktemp "$basename.tmp.XXXX")
    file="${basename}.backup"
    tar_opt="cf"
    if [ "$compress" = "yes" ]; then
        file="$file.gz"
        tar_opt="z${tar_opt}"
    fi
    trap 'rc=$?; rm -f "$config_tar" "$tmp_file"; trap "" 0; exit $rc' \
        EXIT HUP INT QUIT TERM
    tar cf "$config_tar" . || \
        error_no_log "Failed to create backup of $NCS_CONFIG_DIR"
    cd "$NCS_RUN_DIR" || \
        error_no_log "Failed to change directory to $NCS_RUN_DIR"
    check_run_dir || \
        error_no_log "Failed to create backup due to corrupted $NCS_RUN_DIR"
    dirs=$(ls | grep -v '^backups$')
    # We could do some locking here, but it's non-trivial to do
    # (e.g. "ncs_cmd -c maapi_lock") from a script, and not really needed
    # - it is safe to read the CDB files even if they are being written
    # GNU tar and BSD tar behaves differently. GNU error code 1 means
    # file was modified during creation of archive, while BSD tar does not
    # acknowledge this scenario and continues.
    tar $tar_opt "$tmp_file" $dirs
    tar_exit_code=$?

    case "$(tar --version 2>/dev/null)" in
        *GNU*) [ "$tar_exit_code" -le 1 ] ;;
        *) [ "$tar_exit_code" -eq 0 ] ;;
    esac
    [ $? -eq 0 ] || error_no_log "Failed to create backup"

    mv "$tmp_file" "$file" || error_no_log "Failed to rename backup"
    chmod g+r "$file"
    rm -f "$config_tar" "$tmp_file"
    echo "INFO  Backup $file created successfully"
    exit 0
}

local_backup()
{
    cd "$local_instdir" || exit
    config_tar="config_dir.tar"
    date=$(date +%Y-%m-%dT%H:%M:%S)
    basename="${PWD##*/}@$date"
    tmp_file=$(mktemp "backups/$basename.tmp.XXXX")
    file="${basename}_local.backup"
    tar_opt="cf"
    if [ "$compress" = "yes" ]; then
        file="$file.gz"
        tar_opt="z${tar_opt}"
    fi
    # The trap command is used to remove temp files
    trap 'rc=$?; rm -f $config_tar "$tmp_file"; trap "" 0; exit $rc' \
        EXIT HUP INT QUIT TERM
    tar cf $config_tar "$local_conf_file"
    check_run_dir_local || \
        error_no_log "Failed to create backup due to corrupted installation"
    dirs=$(ls | grep -v -e '^backups$' -e '^ncs-tech-report' -e '^log')
    # We could do some locking here, but it's non-trivial to do
    # (e.g. "ncs_cmd -c maapi_lock") from a script, and not really needed
    # - it is safe to read the CDB files even if they are being written
    # GNU tar and BSD tar behaves differently. GNU error code 1 means
    # file was modified during creation of archive, while BSD tar does not
    # acknowledge this scenario and continues.
    tar $tar_opt "$tmp_file" $dirs
    tar_exit_code=$?

    case "$(tar --version 2>/dev/null)" in
        *GNU*) [ "$tar_exit_code" -le 1 ] ;;
        *) [ "$tar_exit_code" -eq 0 ] ;;
    esac
    [ $? -eq 0 ] || error_no_log "Failed to create backup"

    mv "$tmp_file" "backups/$file" || \
        error_no_log "Failed to rename backup"
    chmod g+r "backups/$file"
    rm -f "$config_tar" "$tmp_file"
    echo "INFO  Backup $local_instdir/backups/$file created successfully"
    exit 0
}

get_major()
{
    echo "$1" | awk -F. '{print $1 "." $2}'
}

make_active()  # ncs-<vsn>
{
    rm "$system_instdir/current" || \
        error_no_log "Failed to remove $system_instdir/current symbolic link"
    ln -s "$1" "$system_instdir/current"
    if [ ! -L "$system_instdir/current" ]; then
        error_no_log "Failed to create $system_instdir/current symbolic link"
    fi
}

check_package_symlinks()
{
    # 'test -d/-f' follow symlinks, and both fail for a dangling one
    (
        cd packages || exit
        for p in *; do
            if [ -L "$p" ]; then
                if [ ! -d "$p" -a ! -f "$p" ]; then
                    l=$(ls -l "$p" | awk '{print $NF}')
                    echo "  $p -> $l"
                fi
            fi
        done
    )
}

ensure_ncs_run_dir_not_mount_point()
{
    PATH=/sbin:$PATH mount | awk -v x="$NCS_RUN_DIR" '$3 == x{exit 1}' || \
        error_no_log "NCS_RUN_DIR $NCS_RUN_DIR is in the root of a mount point"
}

restore()
{
    # we assume that the name of the backup file hasn't been changed
    backedup_version=$(echo "$backup" | \
        sed -e 's|\.gz$||' -e 's|^.*/\(ncs-[^/@]*\)@[^/@]*\.backup$|\1|')
    case "$backedup_version" in
        ncs-*.*)
            if [ "$backedup_version" != "$current" ]; then
                echo "INFO  The backup is from version $backedup_version,"
                echo "INFO  but version $current is currently active"
                backedup_major=$(get_major "$backedup_version")
                current_major=$(get_major "$current")
                if [ -d "$system_instdir/$backedup_version" ]; then
                    if [ "$interactive" = "yes" ]; then
                        ask "Change active version to $backedup_version"
                        if [ "$reply" = "no" ]; then
                            if [ "$backedup_major" != "$current_major" ]; then
                                error_no_log "Cannot use backup from \
                                              different major version"
                            else
                                echo "INFO  Starting version $current \
                                      from this backup may not be successful"
                                ask "Continue with restore"
                                if [ "$reply" = "no" ]; then
                                    echo "INFO  Restore aborted"
                                    exit 0
                                fi
                            fi
                        else
                            make_active "$backedup_version"
                        fi
                    else # --non-interactive
                        make_active "$backedup_version"
                        log "INFO  Changed active version to $backedup_version"
                    fi
                else # not installed version
                    if [ "$interactive" = "yes" ]; then
                        echo "INFO  and version $backedup_version \
                              is not installed"
                        echo "INFO  Starting version $current from \
                              this backup may not be successful"
                        echo "INFO  The recommended solution is to \
                              install version $backedup_version"
                        echo "INFO  and then re-attempt the restore"
                        ask "Continue with this restore anyway"
                        if [ $reply = "no" ]; then
                            echo "INFO  Restore aborted"
                            exit 0
                        fi
                    else
                        error_no_log "Version $backedup_version \
                                      is not installed"
                    fi
                fi
            fi
            ;;
        *)
            error_no_log "Cannot determine NCS version from $backup"
            ;;
    esac

    ensure_ncs_run_dir_not_mount_point
    restore_dir="$NCS_RUN_DIR.restore"
    old_dir="$NCS_RUN_DIR.old"
    rm -rf "$old_dir"
    if exists "$old_dir"; then
        error_no_log "Failed to remove $old_dir"
    fi
    rm -rf "$restore_dir"
    if exists "$restore_dir"; then
        error_no_log "Failed to remove $restore_dir"
    fi
    trap 'rc=$?; rm -rf "$restore_dir"; trap "" 0; exit $rc' \
         EXIT HUP INT QUIT TERM
    mkdir -p "$restore_dir"
    if [ ! -d "$restore_dir" ]; then
        error_no_log "Failed to create restore directory $restore_dir"
    fi
    cd "$restore_dir" || exit
    case "$backup" in
        *.gz) tar_opt="xfz";;
        *)    tar_opt="xf";;
    esac
    tar $tar_opt "$backup" || error_no_log "Failed to unpack backup $backup"
    if [ ! -f config_dir.tar ]; then
        error_no_log "File $backup is not an NCS backup"
    fi
    check_run_dir || error_no_log "File $backup is not an NCS backup"
    bad_package_links=$(check_package_symlinks)
    if [ "$bad_package_links" != "" ]; then
        echo "ERROR  The following entries in the packages directory in the"
        echo "ERROR  backup are symbolic links to non-existing packages"
        echo "$bad_package_links"
        echo "ERROR  Please make sure that these packages are installed"
        error_no_log "Restore aborted"
    fi

    if [ "$interactive" = "yes" ]; then
        ask "Restore $NCS_CONFIG_DIR from the backup"
        restore_config_dir=$reply
    else
        restore_config_dir="yes"
    fi
    if [ $restore_config_dir = "yes" ]; then
        mkdir -p "$NCS_CONFIG_DIR"
        (cd "$NCS_CONFIG_DIR" && tar xf "$restore_dir/config_dir.tar") || \
            error_no_log "Failed to restore $NCS_CONFIG_DIR from the backup"
    fi
    rm -f config_dir.tar

    if [ "$interactive" = "yes" ]; then
        ask "Restore $NCS_RUN_DIR from the backup"
        restore_run_dir=$reply
    else
        restore_run_dir="yes"
    fi
    if [ $restore_run_dir = "yes" ]; then
        if exists "$NCS_RUN_DIR"; then
            mv "$NCS_RUN_DIR" "$old_dir"
            if exists "$NCS_RUN_DIR"; then
                error_no_log "Failed to rename $NCS_RUN_DIR to $old_dir"
            fi
        fi
        mv "$restore_dir" "$NCS_RUN_DIR"
        if [ ! -d "$NCS_RUN_DIR" ]; then
            if exists "$old_dir"; then
                mv "$old_dir" "$NCS_RUN_DIR"
            fi
            error_no_log "Failed to rename $restore_dir to $NCS_RUN_DIR"
        fi
        # preserve backups (if any)
        if [ -d "$old_dir/backups" ]; then
            mv "$old_dir/backups" "$NCS_RUN_DIR"
        else
            mkdir "$NCS_RUN_DIR/backups"
        fi
        # preserve INSTALLATION-LOG from current - good idea?
        if [ -f "$old_dir/INSTALLATION-LOG" ]; then
            cp "$old_dir/INSTALLATION-LOG" "$NCS_RUN_DIR/INSTALLATION-LOG"
        fi
        rm -rf "$old_dir"
    fi
    if [ $restore_config_dir = "yes" ]; then
        log_no_echo "INFO  Restored $NCS_CONFIG_DIR from $backup"
    fi
    if [ $restore_run_dir = "yes" ]; then
        log_no_echo "INFO  Restored $NCS_RUN_DIR from $backup"
    fi
    echo "INFO  Restore completed successfully"
    exit 0
}

local_restore()
{
    if [ -n "$(ls -A "$local_instdir")" ]; then
        echo "When restoring a local installation backup," \
             "the '--install-dir' must point to an empty directory."
        exit 1
    fi
    case "$backup" in
        *.gz) tar_opt="xfz";;
        *)    tar_opt="xf";;
    esac
    tar $tar_opt "$backup" --directory "$local_instdir" ||
        error_no_log "Failed to unpack backup $backup"
    mkdir -p "$local_instdir/logs"
}

system_instdir=""
local_instdir=""
interactive="yes"
compress="yes"
doit="backup"
backup=""
err_not_ncs=" does not appear to be an NCS installation directory"
local_conf_file=""

while [ $# -gt 0 ]; do
    case "$1" in
        -h|-help|--help)
            usage
            ;;
        --install-dir)
            case "$2" in
                -*) error_no_log "Missing argument to --install-dir" ;;
                *) system_instdir="$2" ;;
            esac
            shift
            ;;
        --restore)
            doit="restore"
            case $2 in
                -*)
                    backup=""
                    ;;
                *)
                    backup="$2"
                    shift
                    ;;
            esac
            ;;
        --non-interactive)
            interactive="no"
            ;;
        --no-compress)
            compress="no"
            ;;
        *)
            usage_error "Unknown argument $1"
            ;;
    esac
    shift
done

case "$system_instdir" in
    '') system_instdir="/opt/ncs" ;;
    *) system_instdir=$(abspath "$system_instdir") ;;
esac

if [ -f "$system_instdir/installdirs" ]; then
    . "$system_instdir/installdirs"
    for f in "$NCS_CONFIG_DIR" "$NCS_RUN_DIR" "$NCS_LOG_DIR"; do
        case "$f" in
            /?*) # absolute path and not '/'
                ;;
            *)
                error_no_log "$system_instdir/installdirs content is corrupt"
                ;;
        esac
    done
else
    local_instdir="$system_instdir"

    if [ -f "$local_instdir/ncs.conf" ]; then
        local_conf_file="$local_instdir/ncs.conf"
        # if a restore and ncs.conf exists, go on to
        # local_restore() and let it fail there
        if [ $doit = "restore" ]; then
            doit="local_restore"
        fi
    else
        local_conf_file="$NCS_DIR/etc/ncs/ncs.conf"
        case "$backup" in
            *"_local"*)
                doit="local_restore";;
            *)
            ;;
        esac
    fi
fi

if [ ! "$local_instdir" = "" ]; then
    if [ $doit = "backup" ]; then
        mkdir -p "$local_instdir/backups"
        backup="$backup_dir/$backup"
        doit="local_backup"
    fi
else
    current_path=$( (cd "$system_instdir"/current && /bin/pwd -P))
    current=$(basename "$current_path")
    case "$current" in
        ncs-*)
        ;;
        *)
            error_no_log "$system_instdir$err_not_ncs";;
    esac
    backup_dir="$NCS_RUN_DIR/backups"
    PATH="$system_instdir/current/bin:$PATH"
    export PATH
fi

if [ $doit = "restore" ]; then
    ncs="$system_instdir/current/bin/ncs"
    if [ ! -x "$ncs" ]; then
        error_no_log "$system_instdir$err_not_ncs"
    fi
    if "$ncs" --status >/dev/null 2>&1; then
        error_no_log "Cannot do --restore while NCS is running"
    fi
    if [ -z "$backup" ]; then
        if [ $interactive = "no" ]; then
            error_no_log "No backup specified for --restore"
        fi
        backups=$( (cd "$backup_dir" && ls -d ncs-*.backup*) | \
            sed -n -e '/\.backup$/p' -e '/\.backup\.gz$/p')
        if [ -z "$backups" ]; then
            error_no_log "No NCS backups found in $backup_dir"
        fi
        echo "Available backups:"
        echo "$backups" | awk '{ print NR ":", $0 }'
        echo "Select a backup to restore: " | tr -d '\012'
        read -r backup
        case "$backup" in
            ncs-*.backup|ncs-*.backup.gz)
                if [ ! -f "$backup_dir/$backup" ]; then
                    error_no_log "Invalid selection"
                fi
                ;;
            *)
                backup=$(echo "$backups" | awk "NR == $backup")
                if [ -z "$backup" ]; then
                    error_no_log "Invalid selection"
                fi
                ;;
        esac
        backup="$backup_dir/$backup"
    else
        case "$backup" in
            /*) ;;
            *) backup="$backup_dir/$backup" ;;
        esac
        if [ ! -f "$backup" ]; then
            error_no_log "Backup file $backup not found"
        fi
    fi
fi

$doit

exit 0
