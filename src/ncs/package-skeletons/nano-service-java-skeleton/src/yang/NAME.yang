module %NAME% {
  namespace "http://com/example/basic-%NAME%/%NAME%";
  prefix %NAME%;

  import ietf-inet-types {
    prefix inet;
  }
  import tailf-ncs {
    prefix ncs;
  }

  organization "Tail-f";
  description
     "An example Nano service module that create virtual routers instances and
      configure them. The %NAME% instances could be implemented as containers
      or VMs, but are here represented by a simple list in the service YANG
      model itself for simulating interaction with a virtualization
      infrastructure.";

  revision 2021-10-13 {
    description
      "Initial revision.";
  }

  // Service model
  list %NAME% {
    key name;

    uses ncs:nano-plan-data;
    uses ncs:service-data;
    ncs:servicepoint "%NAME%-servicepoint";

    leaf name {
      type string;
    }

    leaf vm-up-and-running {
      type boolean;
      config false;
    }
  }

  // Nano service specifics
  identity vm-requested {
    base ncs:plan-state;
  }

  identity vm-configured {
    base ncs:plan-state;
  }

  /*
  identity link {
    base ncs:plan-component-type;
  }

  identity dev-setup {
    base ncs:plan-state;
  }
  */

  ncs:plan-outline %NAME%-plan {
    description "Plan for configuring a VM-based router";

    ncs:component-type "ncs:self" {
      ncs:state "ncs:init";
      ncs:state "%NAME%:vm-requested" {
        ncs:create {
          // Invoke a Python callback to create a %NAME% instance
          ncs:nano-callback;
        }
      }
      ncs:state "%NAME%:vm-configured" {
        ncs:create {
          // Invoke a service template to configure the %NAME%
          ncs:nano-callback;
          ncs:pre-condition {
            // Wait for a state to become true
            ncs:monitor "$SERVICE" {
              ncs:trigger-expr "vm-up-and-running = 'true'";
            }
          }
        }
      }
      ncs:state "ncs:ready";

      /*
      // vlan-link Example
      ncs:component-type "%NAME%:vlan-link" {
      ncs:state "ncs:init";
      ncs:state "%NAME%:dev-setup" {
        ncs:create {
          ncs:nano-callback;
        }
      }
      ncs:state "ncs:ready" {
        ncs:create {
          ncs:pre-condition {
            ncs:monitor "$SERVICE/endpoints" {
              ncs:trigger-expr "test-passed = 'true'";
            }
          }
        }
        ncs:delete {
          ncs:pre-condition {
            ncs:monitor "$SERVICE/plan" {
              ncs:trigger-expr
                "component[name != 'self'][back-track = 'false']"
              + "/state[name = 'ncs:ready'][status = 'reached']"
              + " or not(component[back-track = 'false'])";
            }
          }
        }
      }
      */
    }
  }

  ncs:service-behavior-tree %NAME%-servicepoint {
    description "A static, single component behavior tree";
    ncs:plan-outline-ref "%NAME%:%NAME%-plan";
    ncs:selector {
      ncs:create-component "'self'" {
        ncs:component-type-ref "ncs:self";
      }
    }

    /*
    // More detailed example of behavior-tree with vlan-link
    ncs:selector {
      // create a single component of type self
      ncs:create-component "'self'" {
        ncs:component-type-ref "ncs:self";
      }

      // create one link component per given endpoint
      ncs:multiplier {
        ncs:foreach "endpoints" {
          ncs:variable "LINKNAME" {
            ncs:value-expr "concat(a-device, '-', a-interface,
                                   '-', b-device, '-', b-interface)";
          }

          ncs:create-component "$LINKNAME" {
            ncs:component-type-ref "%NAME%:vlan-link";
          }
        }
      }
    }
    */
  }

  // Example model for simulating interaction
  // with virtualization infrastructure
  list vm-instance {
    key name;

    leaf name {
      type string;
    }

    leaf type {
      mandatory true;
      type enumeration {
        enum csr-small;
        enum csr-large;
      }
    }

    leaf address {
      type inet:ipv4-address;
    }
  }
}
