<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.cisco.sarest</groupId>
	<artifactId>sarest</artifactId>
	<packaging>war</packaging>
	<version>3.1.22</version>
	<name>sarest</name>
	<reporting>
		<plugins>
			<plugin>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.9</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>summary</report>
							<report>project-team</report>
							<report>mailing-list</report>
							<report>cim</report>
							<report>issue-tracking</report>
							<report>scm</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
			<plugin>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>2.19.1</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>report-only</report>
							<report>failsafe-report-only</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
			<plugin>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.5</version>
				<configuration>
					<skipEmptyReport>false</skipEmptyReport>
				</configuration>
				<reportSets>
					<reportSet>
						<reports>
							<report>pmd</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>
	<build>
		<finalName>smartagent-${project.version}</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.5.1</version>
				<inherited>true</inherited>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.4</version>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.doxia</groupId>
						<artifactId>doxia-module-confluence</artifactId>
						<version>1.6</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
				<version>1.1.2</version>
				<configuration>
					<configuration>
						<deployables>
							<deployable>
								<properties>
									<context>${project.artifactId}</context>
								</properties>
							</deployable>
						</deployables>
					</configuration>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.5</version>
				<executions>
					<execution>
						<id>attach-enunciate</id>
						<phase>package</phase>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
						<configuration>
							<artifacts>
								<artifact>
									<file>${project.build.directory}/enunciate/java-json-client/build/smartagent/api-json-client.jar</file>
									<classifier>api-json-client</classifier>
									<type>jar</type>
								</artifact>
							</artifacts>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.webcohesion.enunciate</groupId>
				<artifactId>enunciate-maven-plugin</artifactId>
				<version>${enunciate.version}</version>
				<configuration>
					<configFile>src/conf/enunciate.xml</configFile>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>docs</goal>
						</goals>
						<configuration>
							<docsDir>${enunciate.directory}</docsDir>
							<sourcepath-includes>
								<include>
									<!-- configure Enunciate to look for the source jars -->
									<groupId>com.cisco.nesla</groupId>
									<artifactId>nesla</artifactId>
								</include>
							</sourcepath-includes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<!-- DO NOT include log4j.properties file in your Jar -->
					<excludes>
						<exclude>**/log4j.properties</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<id>rest-jar</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<classifier>rest</classifier>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<execution>
						<id>trial-package</id>
						<phase>package</phase>
						<configuration>
							<target>
								<echo>Building trial package... </echo>
								<delete dir="${basedir}/target/${sdk.outputDir}" />
								<copy todir="${basedir}/target/${sdk.outputDir}/docs">
									<fileset dir="${project.build.directory}/docs" />
								</copy>
								<copy todir="${basedir}/target/${sdk.outputDir}">
									<fileset file="${basedir}/src/test/script/README" />
									<fileset file="${basedir}/change.log" />
								</copy>
								<copy todir="${basedir}/target/${sdk.outputDir}/lib">
									<fileset file="${basedir}/target/${project.build.finalName}.war" />
								</copy>
								<copy todir="${basedir}/target/${sdk.outputDir}/example">
									<fileset file="${basedir}/src/test/script/*.sh">
										<exclude name="smart-agent-stress.sh" />
									</fileset>
									<fileset file="${basedir}/src/test/script/*.template" />
									<fileset file="${basedir}/src/test/script/*.dat" />
								</copy>
								<copy tofile="${basedir}/target/${sdk.outputDir}/example/agentconfig-example.json">
									<file file="${basedir}/src/test/resources/agentconfig.json" />
								</copy>
								<copy todir="${basedir}/target/${sdk.outputDir}/example/HAExample">
									<fileset dir="${basedir}/src/test/script/HAExample" />
								</copy>
								<copy todir="${basedir}/target/${sdk.outputDir}/example/GCHExample">
									<fileset dir="${basedir}/src/test/script/GCHExample" />
								</copy>
								<copy todir="${basedir}/target/${sdk.outputDir}/example/config">
									<fileset dir="${basedir}/src/test/script/config" />
								</copy>
								<property environment="env" />
								<condition property="pkg-version" value="${project.version}.${env.BUILD_NUMBER}" else="${project.version}">
									<isset property="env.BUILD_NUMBER" />
								</condition>
								<!-- Generate SDK package -->
								<tar destfile="${basedir}/dist/smart-agent-rest-${pkg-version}.tar" compression="gzip" basedir="${basedir}/target" includes="${sdk.outputDir}/**" />
								<!-- Generate site package -->
								<jar destfile="${basedir}/target/sarest-${pkg-version}-site.jar" basedir="${basedir}/target/${project.build.finalName}" includes="**" />
								<jar destfile="${basedir}/target/sarest-${pkg-version}-site.jar" update="true" basedir="${basedir}" includes="dist/**" />
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
					<execution>
						<id>copy-changelog-docs</id>
						<phase>prepare-package</phase>
						<configuration>
							<target>
								<copy file="${basedir}/change.log" todir="${enunciate.directory}/apidocs" />
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<filesets>
						<fileset>
							<directory>${basedir}</directory>
							<includes>
								<include>dist/**</include>
								<include>data/**</include>
							</includes>
							<followSymlinks>false</followSymlinks>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${jetty.version}</version>
				<configuration>
					<systemProperties>
					</systemProperties>
					<webApp>
						<contextPath>/</contextPath>
						<descriptor>${project.basedir}/src/main/webapp/WEB-INF/web.xml</descriptor>
					</webApp>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.18</version>
				<configuration>
					<systemPropertyVariables>
						<jacoco-agent.destfile>${jacoco.outputDir}</jacoco-agent.destfile>
					</systemPropertyVariables>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
				<executions>
				<!-- special execution to build a jboss-friendly war file
				    jboss needs some special settings to disable JAX-RS 1.x
				    and these specific deployment descriptors do that -->
					<execution>
						<id>jbosswar</id>
						<phase>package</phase>
						<goals>
							<goal>war</goal>
						</goals>
						<configuration>
							<classifier>jboss6</classifier>
							<webXml>jboss6-specific/web-jboss.xml</webXml>
							<webResources>
								<resource>
									<directory>jboss6-specific</directory>
									<include>jboss-deployment-structure.xml</include>
									<targetPath>WEB-INF</targetPath>
								</resource>
							</webResources>
							<packagingExcludes>WEB-INF/classes/log4j.properties</packagingExcludes>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
			</plugins>
		</pluginManagement>
	</build>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.glassfish.jersey</groupId>
				<artifactId>jersey-bom</artifactId>
				<version>${jersey.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-servlet-core</artifactId>
			<!-- use the following artifactId if you don't need servlet 2.x compatibility -->
			<!-- artifactId>jersey-container-servlet</artifactId -->
	</dependency>
	<dependency>
		<groupId>org.glassfish.jersey.media</groupId>
		<artifactId>jersey-media-json-jackson</artifactId>
	</dependency>
   <dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.15.0</version>
		</dependency> 
	<dependency>
    	<groupId>org.glassfish.jersey.inject</groupId>
		<artifactId>jersey-hk2</artifactId>
	</dependency>    
<!-- This block of dependency is needed for upgrading jackson-databind 2.9.5, should be removed after jersey package upgrade -->
<!-- Start of temporary  -->	
    <dependency>
        <groupId>com.fasterxml.jackson.jaxrs</groupId>
        <artifactId>jackson-jaxrs-base</artifactId>
        <version>2.9.9</version>
    </dependency>
    <dependency>
        <groupId>com.fasterxml.jackson.jaxrs</groupId>
        <artifactId>jackson-jaxrs-json-provider</artifactId>
        <version>2.9.9</version>
    </dependency>
     <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-annotations</artifactId>
        <version>2.15.0</version>
    </dependency>
<!-- End of temporary  -->
	<dependency>
		<groupId>org.glassfish.jersey.media</groupId>
		<artifactId>jersey-media-sse</artifactId>
	</dependency>
	<dependency>
		<groupId>com.cisco.nesla</groupId>
		<artifactId>nesla</artifactId>
 		<version>${nesla.version}</version>
	</dependency>
	<dependency>
		<groupId>org.apache.logging.log4j</groupId>
		<artifactId>log4j-to-slf4j</artifactId>
		<version>2.17.1</version>
		<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>	
					<artifactId>slf4j-api</artifactId>
				</exclusion>
		</exclusions>
	</dependency>
	<dependency>
		<groupId>org.glassfish.jersey.test-framework.providers</groupId>
		<artifactId>jersey-test-framework-provider-grizzly2</artifactId>
		<!-- <version>2.13</version> -->
		<scope>test</scope>
	</dependency>
	<dependency>
		<groupId>org.eclipse.jetty</groupId>
		<artifactId>jetty-server</artifactId>
		<version>${jetty.version}</version>
	</dependency>
	<dependency>
		<groupId>org.eclipse.jetty</groupId>
		<artifactId>jetty-servlets</artifactId>
		<version>${jetty.version}</version>
	</dependency>
	<!-- <dependency>
		<groupId>org.codehaus.jackson</groupId>
		<artifactId>jackson-mapper-asl</artifactId>
		<version>1.9.13</version>
	</dependency> -->
	<dependency>
		<groupId>com.webcohesion.enunciate</groupId>
		<artifactId>enunciate-core-annotations</artifactId>
		<version>${enunciate.version}</version>
		<optional>true</optional>
	</dependency>
	<dependency>
		<groupId>xalan</groupId>
		<artifactId>xalan</artifactId>
		<version>2.7.3</version>
	</dependency>
	<dependency>
		<groupId>xalan</groupId>
        <artifactId>serializer</artifactId>
        <version>2.7.3</version>
    </dependency>
	<dependency>
		<groupId>org.mockito</groupId>
		<artifactId>mockito-core</artifactId>
		<version>1.10.19</version>
		<scope>test</scope>
	</dependency>
	<dependency>
		<groupId>org.powermock</groupId>
		<artifactId>powermock-module-junit4</artifactId>
		<version>${powermock.version}</version>
		<scope>test</scope>
	</dependency>
	<dependency>
		<groupId>org.powermock</groupId>
		<artifactId>powermock-api-mockito</artifactId>
		<version>${powermock.version}</version>
		<scope>test</scope>
	</dependency>
	<dependency>
		<groupId>org.powermock</groupId>
		<artifactId>powermock-module-javaagent</artifactId>
		<version>${powermock.version}</version>
		<scope>test</scope>
	</dependency>
	<dependency>
		<groupId>org.powermock</groupId>
		<artifactId>powermock-module-junit4-rule-agent</artifactId>
		<version>${powermock.version}</version>
		<scope>test</scope>
	</dependency>
	<dependency>
		<groupId>junit</groupId>
		<artifactId>junit</artifactId>
		<version>4.12</version>
		<scope>test</scope>
	</dependency>
</dependencies>
<repositories>
	<repository>
		<id>bms-artifactory-sjc</id>
		<name>bms-artifactory-sjc-releases</name>
		<url>https://engci-maven.cisco.com/artifactory/DLO-release-repo</url>
	</repository>
	<repository>
		<id>bms-artifactory-sjc-snapshots</id>
		<name>bms-artifactory-sjc-snapshots</name>
		<releases>
			<enabled>false</enabled>
		</releases>
		<url>https://engci-maven.cisco.com/artifactory/DLO-snapshot-repo</url>
	</repository>
</repositories>
<properties>
	<nesla.version>${project.version}</nesla.version>
	<jersey.version>2.28</jersey.version>
	<enunciate.version>2.3.0</enunciate.version>
	<enunciate.directory>${project.build.directory}/docs</enunciate.directory>
	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	<powermock.version>1.6.4</powermock.version>
	<jacoco.version>0.7.6.201602180812</jacoco.version>
	<jacoco.outputDir>${project.build.directory}/jacoco.exec</jacoco.outputDir>
	<jetty.version>9.4.48.v20220622</jetty.version>
	<sdk.outputDir>SmartAgentREST-${project.version}-sdk</sdk.outputDir>
</properties>

<profiles>
	<profile>
		<id>codecoverage</id>
		<reporting>
			<plugins>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco.version}</version>
					<configuration>
						<excludes>
							<exclude>com/cisco/sarest/example/**</exclude>
							<exclude>com/cisco/sarest/plugins/**</exclude>
						</excludes>
					</configuration>
				</plugin>
			</plugins>
		</reporting>
		<build>
			<plugins>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco.version}</version>
					<executions>
						<!-- Goals to generate unit test code coverage data -->
						<execution>
							<id>default-instrument</id>
							<phase>process-test-classes</phase>
							<goals>
								<goal>instrument</goal>
							</goals>
						</execution>
						<execution>
							<id>default-restore-instrumented-classes</id>
							<phase>prepare-package</phase>
							<goals>
								<goal>restore-instrumented-classes</goal>
							</goals>
						</execution>

						<!-- Goals to generate integration test code coverage data The Integration 
								tests are separate because otherwise the instrumented classes would be packaged 
								into the final jar -->
							<execution>
								<id>default-instrument-it</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>instrument</goal>
								</goals>
							</execution>
							<execution>
								<id>default-restore-instrumented-classes-it</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>restore-instrumented-classes</goal>
								</goals>
							</execution>

							<execution>
								<id>default-check</id>
								<goals>
									<goal>check</goal>
								</goals>
								<configuration>
									<rules></rules>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<dependencies>
				<dependency>
					<groupId>org.jacoco</groupId>
					<artifactId>org.jacoco.agent</artifactId>
					<classifier>runtime</classifier>
					<version>${jacoco.version}</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>
	</profiles>
</project>
