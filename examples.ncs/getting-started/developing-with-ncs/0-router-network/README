Example #0: Starting the device simulator and NCS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This first example shows how to operate NCS towards the example
network in the "getting-started/developing-with-ncs" example
collection. The network is generated by ncs-netsim, emulating a
"network" consisting of 3 simulated devices defined by the ncs package
in ./packages/router

Read more about NCS packages, projects, ncs-netsim etc in the NCS user
guide, or the manpages:

        ncs-make-package(1)
        ncs-netsim(1)
        ncs-setup(1)


Starting the simulated network
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ncs-netsim network we run in this suite of examples looks like:

                 -------
                 | NCS |
                 -------
                    |
                    |
----------------------------------------------------------
     |                      |                      |
     |                      |                      |
  -------                -------                -------
  | ex0 |                | ex1 |                | ex2 |
  -------                -------                -------

In order to start the simulated devices, we need to build them using
make:

        $ make all

this builds the packages and creates a ncs-netsim simulated network
consisting of the three "routers" called ex0, ex1 and ex2. The
environment for the emulated network resides in the newly generated
directory ./netsim which is created by the ncs-netsim create-network
command in the Makefile.

To start our "network", use the ncs-netsim command:

        $ ncs-netsim start
        DEVICE ex0 OK STARTED
        DEVICE ex1 OK STARTED
        DEVICE ex2 OK STARTED

At this point, we have three running simulated "routers" that we can
talk NETCONF to.  Each router runs ConfD with a NETCONF agent on
localhost with the yang models in ./packages/router/src/yang

You can list the devices in the simulated network using

        $ ncs-netsim list
        name=ex0 netconf=12022 ipc=5000 dir=/home/.../netsim/ex/ex0
        name=ex1 netconf=12023 ipc=5001 dir=/home/.../netsim/ex/ex1
        name=ex2 netconf=12024 ipc=5002 dir=/home/.../netsim/ex/ex2

You will find additional ncs-netsim commands by issuing

        $ ncs-netsim help


Starting NCS
~~~~~~~~~~~~

To start the NCS server with the default configuration, simply run

        $ ncs

NCS will now load the data models, packages and initialization
data. NCS will not connect to any real or simulated devices until an
operator tells it to. NCS is now ready for operators to log in.

To login on the NCS Command Line Interface (CLI), run

        $ ncs_cli -u admin

The flag "-u admin" makes you log in as the "admin" user. This NCS
example is configured for the admin user, so if you omit the flag, you
will get problems due to lacking access rights.

When you start the CLI this way, no password is required. The ncs_cli
program is intended to run as a login program, in which case the
system will require a password before allowing the ncs_cli program to
run. Anyone who can get a terminal window shell prompt can in
principle login to NCS as any NCS user.

To login to the NCS CLI like an external user, such that a password is
required, you can use ssh

        $ ssh admin@localhost -p 2024

The default password for the admin user in this example is "admin".

To login on the NCS Web User Interface (WebUI), direct your browser to

        http://localhost:8080

and login as user "admin" with password "admin".

It is often interesting to see exactly what NCS sends to the
devices. To be able to see this, run the following command in NCS:

        > configure
        % set devices global-settings trace pretty
        % commit


Managing devices using NCS
~~~~~~~~~~~~~~~~~~~~~~~~~~

NCS will manage the devices it is told to manage, and no others. You
can view list of devices it will manage using the following
command

        > show configuration devices device | display-level 2
        device ex0 {
            address   127.0.0.1;
            port      12022;
            authgroup default;
        }
        device ex1 {
            address   127.0.0.1;
            port      12023;
            authgroup default;
        }
        device ex2 {
            address   127.0.0.1;
            port      12024;
            authgroup default;
        }

The "display-level 2" directive ensures we get only the device names
and basic configuration (2 levels). By omitting that part, potentially
a lot of other configuration data may be displayed.

Add or remove entries in the device list to change which devices NCS
will manage, or how NCS connects to them, etc. In this example, the
list of devices to manage was built as CDB database initialization
data by the "make all" command earlier.


The NCS Device Manager
~~~~~~~~~~~~~~~~~~~~~~

Once logged in to the NCS CLI, you can show device status or change
the device configuration. At this point NCS isn't aware whether the
devices actually exist or what their configurations might be. So the
first step will be to connect to the devices and read up their
configurations into NCS.

        > request devices connect

        > request devices sync-from

View the configuration of the "ex0" device using the command

        > show configuration devices device ex0 config

Or show a particular piece of configuration from several devices

        > show configuration devices device ex0..2 config r:sys routes inet

Change a particular piece of configuration across the multiple devices
with the command

        > configure
        % set devices device ex0..2 config r:sys routes inet route 10.2.0.0 24
        next-hop 10.2.0.254 metric 20
        % commit
        % exit

Show the routes again to see the result

        > show configuration devices device ex0..2 config r:sys routes inet


What if a device is down?
~~~~~~~~~~~~~~~~~~~~~~~~~

To see how NCS behaves if a device is or goes down, log out of the NCS
CLI, or use a separate terminal window, to get to a terminal window
prompt. There you can shut down one of the simulated devices with the
command

        $ ncs-netsim stop ex1

You can check which simulated devices are up and down with the command

        $ ncs-netsim is-alive
        DEVICE ex0 OK
        DEVICE ex1 FAIL
        DEVICE ex2 OK

Now, log back in to the NCS CLI, e.g.

        $ ncs_cli -u admin

Make a device configuration change again

        > configure
        % set devices device ex0 config r:sys ntp key 3
        % commit

        % set devices device ex0..2 config r:sys ntp key 3
        % commit

Here, the first commit will work fine, since it does not involve the
device ex1 which is down. The second commit is aborted since it
contains a change that affects a device which refused it. Note that
the configuration of all devices remains unchanged in this case. The
new configuration has never been live on any of them, hence no
disturbance to the network.

The transaction with the changes still exist in admin's NCS session,
however, so we can choose several paths forward from here:
- Forget about the change entirely (revert or exit)
- Remove the change on ex1 (delete devices device ex1 config r:sys ntp key 3)
- Commit the change through the commit queue (commit commit-queue async)
- Bring up ex1 and try committing again
  (in a terminal window: ncs-netsim start ex1 , then in NCS CLI: commit)

Let's try the commit-queue alternative:

        % commit commit-queue async
        % exit

The change will be stored on all devices that respond properly,
but will still remain in the queue until the item is delivered on all,
thus achieving eventual consistency.

You can view the commit queue using the command

        > show devices commit-queue

Log out of the NCS CLI and run (or run the netsim command in a
separate terminal window)

        $ ncs-netsim start ex1

And log back in to NCS CLI

        $ ncs_cli -u admin

Back in the CLI again, you can monitor the commit queue

        > show devices commit-queue


Syncing
~~~~~~~

One of the first actions we did when we started NCS above was to sync
NCS with all the managed devices, to get an up to date view of all
devices' configuration in NCS. After this point, most NCS users would
consider NCS to hold the primary configuration, and synchronizing
mostly from NCS to the devices. This can be done (efficiently) for all
devices in the network, or individually per device. It is also
possible to check whether some or all devices are in sync with NCS
without affecting their configuration.

To verify that all devices are in sync with NCS, try

        > request devices check-sync

In order to introduce a configuration mismatch, logout of the NCS CLI
again (or the following in a separate terminal window). This will open
an Cisco IOS style CLI directly to the simulated device.

        > exit
        $ ncs-netsim cli-i ex1
        > enable
        > configure terminal
        # no sys routes
        # exit
        # exit

Log in to the NCS CLI again

        $ ncs_cli -u admin

And ask NCS to check if the devices are in sync.

        > request devices check-sync
        sync-result {
            device ex0
            result in-sync
        }
        sync-result {
            device ex1
            result out-of-sync
        }
        sync-result {
            device ex2
            result in-sync
        }

To see full details what is out of sync, try

        > request devices device ex1 compare-config

Lines starting with a minus sign (-) are missing on the device, lines
starting with a plus sign (+) have been added on the device.

We can now choose to copy and paste from the diff, or sync the device
config
- From the device to NCS
  (request devices device ex1 sync-from)
- To the device from NCS
  (request devices device ex1 sync-to   <dry-run>)

Here, let's sync to the device:

        > request devices device ex1 sync-to
        > exit

In general, at this point all information from the Device Manager
chapter in the user guide is applicable. Re-read that chapter and play
with the NCS features in the ncs-netsim network here.

This ends the first getting-started tour of NCS. Now you know enough
to continue with the other examples in this directory, in any order.


Restarting the device simulator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sometimes it is useful to get the simulated devices back into a well
defined, initial, clean state. This can be done with the ncs-netsim
reset and restart commands.

The ncs-netsim restart command will
- stop the network
- remove all CDB database files in the device simulator instances
- restart the network

        $ ncs-netsim restart
        DEVICE ex0  STOPPED
        DEVICE ex1  STOPPED
        DEVICE ex2  STOPPED
        DEVICE ex0 RESET
        DEVICE ex1 RESET
        DEVICE ex2 RESET
        DEVICE ex0 OK STARTED
        DEVICE ex1 OK STARTED
        DEVICE ex2 OK STARTED

The ncs-netsim reset command will only remove the database files, and
not start or stop anything.


Controlling NCS
~~~~~~~~~~~~~~~

When NCS starts, it consults a configuration file which tells it which
directories to search, where to store log files, which management
interfaces to enable, and many other things. Unless an NCS
configuration file is specified on the command line when NCS is
started, it will use $NCS_DIR/etc/ncs/ncs.conf .

By default NCS is started as a daemon, but it can also be started in
foreground mode. With the "-c" flag to specify an NCS config file, NCS
start might be started like this

        $ ncs --verbose --foreground -c ./ncs.conf

Once NCS is running, it may be useful to see some status information.
This can be displayed from a terminal window prompt

        $ ncs --status

or in the NCS CLI

        > show ncs-state

If you encounter a problem with strange NCS behavior, it may be useful
to produce a "debug dump" to enclose with the trouble report. If the
problem can be repeated, it is often useful with a debug dump taken
just before triggering the problem, and one just after. Debug dumps
are produced with the follwing command at a terminal window prompt

        $ ncs --debug-dump filename

There are many more NCS commands, you can have them listed with the command

        $ ncs --help

Finally, to stop NCS, run

        $ ncs --stop

This will shut down NCS properly. All configuration data in the
database is preserved when NCS is started the next time. If you also
would like to clear the NCS database and restart from scratch (and you
are using the default database and log locations in ncs.conf) then do
this before starting NCS again

        $ ncs-setup --reset

To clear NCS and the network from all data and restart from scratch

        $ ncs-netsim restart
        $ ncs-setup --reset
        $ ncs


Behind the scenes
~~~~~~~~~~~~~~~~~

In this example, we use a single package, the Network Element Driver
(NED) for the three simulated routers, located in ../packages/router.
This package also contains netsim code. The `netsim` target in the
Makefile uses it to create the simulated network. A directory called
netsim is created to hold the required files.

Since the package has to be built before it can be used, the `all`
(default) target first starts the package build process, then creates
the simulated network with the ncs-netsim create-network command.
Start of the netsim devices is left to the user.

To avoid the hassle with manually adding the devices to NCS, the example
uses an XML init file. This is an XML file that is loaded on the first
NCS start to pre-populate an (otherwise empty) CDB database. The default
ncs.conf file has an entry similar to the following:

  <!-- Where the database (and init XML) files are kept -->
  <cdb>
    <db-dir>./ncs-cdb</db-dir>
    <!-- Always bring in the good system defaults -->
    <init-path>
      <dir>${NCS_DIR}/var/ncs/cdb</dir>
    </init-path>
  </cdb>


In addition to the init-path location, NCS will look for the XML init
files in the db-dir. So, there is a ./ncs-cdb/ncs_init.xml file, which
defines the connection information for the three simulated devices.
It is loaded when NCS starts up the first time (when there are no
existing database files), adding the devices automatically.

Something similar happens with packages, which are also loaded
automatically on the first start, without the need to do a package
reload. A user can then simply start the example with the ncs command.
