
This example illustrates how to

- do an advanced package upgrade where an service package which as instance
data in cdb is changed (including the package name) and data is migrated

This example is based on the vlan service package introduced
in ../4-rfs-service

First we build and run the vlan service to create a number of service instances.
Then we exchange the vlan package with a new version where a new mandatory
leaf has been added. In the end we exchange the vlan package with a complete
different yang file in the "tunnel" package. This illustrates
a scenario where the yang is changed in the first case so that user written
code is needed to update the cdb data, and in the second case so that also
the ncs private data has to be moved (modified).
In latter case implies name change of the service itself.

To handle the user code cdb upgrade a specific upgrade component
is specified in the package-meta-data.xml for the package.
This upgrade component is in principle a java class with a
main class that connects to Ncs and reads old config data using the Cdb api and
writes the adapted config data using the Maapi api.

We will start with using the vlan package and first exchange this to a new
version and later switch to the tunnel package.
To accomplish this in a simple way the three packages are residing
not in the packages directory but a package-store directory. A symbolic link
is created from the package in the package-store directory to the packages
directory. In the start we will have:

$ ls ./packages
 router

Then we create a link to the vlan package in the packages directory:

$ cd ./packages
$ ln -s ../package-store/vlan
$ cd ..
$ ls ./packages
 router  vlan


To build the two packages, do

$ make all

To start the ncs-netsim network, follow the instructions in
../0-router-network, it's the same network here.

$ ncs-netsim start
DEVICE ex0 OK STARTED
DEVICE ex1 OK STARTED
DEVICE ex2 OK STARTED

To run the example we do:

$ ncs

This will start ncs, and ncs will load the two packages, load the
data models defined by the two packages and start the Java code defined
by the packages.

We now start a cli to work with this package:

$ ncs_cli -u admin

We need an initial sync-from devices:

admin@ncs> request devices sync-from
sync-result {
    device ex0
    result true
}
sync-result {
    device ex1
    result true
}
sync-result {
    device ex2
    result true
}

We create a number of services :

admin@ncs> configure
admin@ncs% set services vlan s1 description x iface ethX unit 1 vid 3
admin@ncs% set services vlan s2 description x iface ethX unit 2 vid 4
admin@ncs% commit

We can check the service data:

admin@ncs% show services vlan
vlan s1 {
    iface       ethX;
    unit        1;
    vid         3;
    description x;
}
vlan s2 {
    iface       ethX;
    unit        2;
    vid         4;
    description x;
}


Now we stop Ncs, exchange the vlan package with the vlan_v2 package and start
so that the service data is upgraded by the specific upgrade component in
the vlan_v2 package.

$ ncs --stop
$ cd ./packages
$ rm vlan
$ ln -s ../package-store/vlan_v2 vlan
$ ls
 router  vlan

$ cd ..
$ make vlan

Starting ncs by telling it to reload packages and perform cdb upgrades

$ ncs --with-package-reload


We now start a new cli to check what has happened:

$ ncs_cli -u admin

We can check the upgraded service data:

admin@ncs> configure

admin@ncs% show services vlan
vlan s1 {
    global-id   ethX-1-3;
    iface       ethX;
    unit        1;
    vid         3;
    description x;
}
vlan s2 {
    global-id   ethX-2-4;
    iface       ethX;
    unit        2;
    vid         4;
    description x;
}

Lets also look at what the services has done in a device:

dmin@ncs% show devices device ex0
address   127.0.0.1;
port      12022;
authgroup default;
device-type {
    netconf;
}
state {
    admin-state unlocked;
}
config {
    r:sys {
        interfaces {
            interface eth0 {
                unit 0 {
                    enabled;
                    family {
                        inet {
                            address 192.168.1.2 {
                                prefix-length 16;
                            }
                        }
                    }
                }
                unit 1 {
                    enabled;
                    family {
                        inet {
                            address 192.168.1.3 {
                                prefix-length 16;
                            }
                        }
                    }
                }
                unit 2 {
                    enabled;
                    description "My Vlan";
                    vlan-id     18;
                }
            }
            /* Refcount: 2 */
            /* Backpointer: [ /ncs:services/vl:vlan[vl:name="s1"] /ncs:services/vl:vlan[vl:name="s2"] ] */
            interface ethX {
                /* Refcount: 1 */
                /* Backpointer: [ /ncs:services/vl:vlan[vl:name="s1"] ] */
                unit 1 {
                    enabled;
                    description x;
                    vlan-id     3;
                }
                /* Refcount: 1 */
                /* Backpointer: [ /ncs:services/vl:vlan[vl:name="s2"] ] */
                unit 2 {
                    enabled;
                    description x;
                    vlan-id     4;
                }
            }
        }
        routes {
            inet {
                route 10.1.0.0 4;
            }
        }
        syslog {
            server 10.3.4.5 {
                enabled;
                selector 8 {
                    facility [ auth authpriv local0 ];
                }
            }
        }
        ntp {
            server 10.2.3.4 {
                key 2;
            }
            key 2;
            controlkey 2;
        }
        dns {
            server 10.2.3.4;
        }
    }
}

Note, that looking at the backpointer attribute we can see which service
made the change.

Now we stop Ncs, exchange the vlan package with the tunnel package and start
so that the service data is upgraded by the specific upgrade component in
the tunnel package.

$ ncs --stop
$ cd ./packages
$ rm vlan
$ ln -s ../package-store/tunnel/
$ ls
 router  tunnel

$ cd ..
$ make tunnel

Starting ncs by telling it to reload packages and perform cdb upgrades

$ ncs --with-package-reload


We now start a new cli to check what has happened:

$ ncs_cli -u admin

We can check the upgraded service data:

admin@ncs> configure

admin@ncs% show services tunnel
tunnel s1 {
    gid       ethX-1-3;
    interface ethX;
    assembly  1;
    tunnel-id 3;
    descr     x;
}
tunnel s2 {
    gid       ethX-2-4;
    interface ethX;
    assembly  2;
    tunnel-id 4;
    descr     x;
}

Same service instances but with new names on containers and leafs!
We can check if the services still are in sync:

admin@ncs% request services tunnel s1 check-sync
in-sync true

admin@ncs% request services tunnel s2 check-sync
in-sync true


We can also have a look at the device config data:

admin@ncs% show devices device ex0
address   127.0.0.1;
port      12022;
authgroup default;
device-type {
    netconf;
}
state {
    admin-state unlocked;
}
config {
    r:sys {
        interfaces {
            interface eth0 {
                unit 0 {
                    enabled;
                    family {
                        inet {
                            address 192.168.1.2 {
                                prefix-length 16;
                            }
                        }
                    }
                }
                unit 1 {
                    enabled;
                    family {
                        inet {
                            address 192.168.1.3 {
                                prefix-length 16;
                            }
                        }
                    }
                }
                unit 2 {
                    enabled;
                    description "My Vlan";
                    vlan-id     18;
                }
            }
            /* Refcount: 2 */
            /* Backpointer: [ /ncs:services/tl:tunnel[tl:tunnel-name="s1"] /ncs:services/tl:tunnel[tl:tunnel-name="s2"] ] */
            interface ethX {
                /* Refcount: 1 */
                /* Backpointer: [ /ncs:services/tl:tunnel[tl:tunnel-name="s1"] ] */
                unit 1 {
                    enabled;
                    description x;
                    vlan-id     3;
                }
                /* Refcount: 1 */
                /* Backpointer: [ /ncs:services/tl:tunnel[tl:tunnel-name="s2"] ] */
                unit 2 {
                    enabled;
                    description x;
                    vlan-id     4;
                }
            }
        }
        routes {
            inet {
                route 10.1.0.0 4;
            }
        }
        syslog {
            server 10.3.4.5 {
                enabled;
                selector 8 {
                    facility [ auth authpriv local0 ];
                }
            }
        }
        ntp {
            server 10.2.3.4 {
                key 2;
            }
            key 2;
            controlkey 2;
        }
        dns {
            server 10.2.3.4;
        }
    }
}

Note that the backpointer now identifies the new tunnel service.

