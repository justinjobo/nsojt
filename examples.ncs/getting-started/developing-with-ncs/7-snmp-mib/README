
 NCS SNMP Agent Example - Simple
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The example show how a simple proprietary SNMP MIB, TAIL-F-TEST-MIB,
is used for accessing data from a YANG module called simple.yang.

The user has an existing YANG module and/or MIB and needs to provide a
mapping between the MIB objects to YANG data nodes.  This is done
using tailf:snmp-name or tailf:snmp-oid statements in the YANG module.

    simple.yang
    TAIL-F-TEST-MIB.mib

The example has been made up, and is not something taken from the real
world.  It's purpose is merely to show how a mapping can be done from
MIB objects into YANG .

0.  Both the MIB and the user YANG module are contained inside
    a package defined in packages/snmp-mib/src/
    The package has no components and no Java code, the sole purpose
    of the package is to provide the .bin/.fxs files that are the results
    of compiling the MIB.

1. Compiling the YANG module

The "simple" module is compiled with the 'ncsc' compiler.

ncsc -c simple.yang -o simple.fxs

2. Compiling the MIB

The MIB needs to be compiled in order to be loaded into the NCS SNMP
Agent.  For each SNMP object in the MIB there must be a mapping into
a leaf in the YANG module.  The objects for the TAIL-F-TEST-MIB are
mapped to leafs in the "simple" module, in the simple.yang file.
In order for the "ncsc" compiler to compile the MIB, the MIB file needs to
have '.mib' as file extension.

Sometimes some of the objects in a MIB will not be implemented in the
system, for example when there is a standard MIB which cannot be
modified.  In this case, the user can write a "mib annotation file",
which instructs the SNMP agent in NCS to reply with noSuchObject or
noSuchInstance whenever one of these objects are requested.  In this
example, we have chosen to not implement some objects in the
TAIL-F-TEST-MIB, and one object which is defined in the MIB as
writable, is implemented read-only.  This is defined in the file
TAIL-F-TEST-MIB.miba.

ncsc -c TAIL-F-TEST-MIB.mib -f $NCS_DIR/etc/ncs \
     --mib-annotation TAIL-F-TEST-MIB.miba \
     simple.fxs

3. Configuring the NCS SNMP Agent

The SNMP Agent is part of the NCS daemon and can be enabled from
snmp_init.xml file or through the normal CLI.
Per default the SNMP agent is enabled.  Configure
the IP address and port of the SNMP agent, and list all the MIBs that
should be loaded at startup.

All .bin MIB files found in the load path are loaded. This example
will compile the TAIL-F-TEST-MIB.bin into the load-dir of the package
thus making the min available over the SNMP northbound interface.

To view and manipulate the SNMP configuration, do

$ ncs
$ ncs_cli -u admin

[ok][2010-10-22 10:36:57]
klacke@zoe> show configuration snmp
agent {
    enabled;
    ip               0.0.0.0;
    udp-port         4000;
    version {
        v1;
        v2c;
        v3;
    }
    engine-id {
        enterprise-number 32473;
        from-text         testing;
    }
    max-message-size 50000;
}
system {
    contact  "";
    name     "";
    location "";
}
.........



Make the system with
      > cd packages/snmp-mib/src
      > make all

Start up the system with
      > ncs-netsim start
      > ncs


4. Accessing data from the CLI

The configuration can be checked as usual by running the CLI.
   > ncs_cli -u admin

klacke connected from 127.0.0.1 using console on zoe.tail-f.com
klacke@zoe> show configuration simpleObjects

simpleObjects {
    numberOfServers 2;
    numberOfHosts 2;
    maxNumberOfServers 10;
    maxNumberOfHosts 10;
    hosts {
        host saturn@tail-f.com {
	etc...

The initial data comes from the "simple_init.xml" file.

5. Accessing the data from an SNMP Manager

Use any SNMP manager and connect it to the NCS SNMP Agent.
The example below uses NetSNMP as a manager.

5a. SNMP Walk

   > export MIBS=`pwd`/packages/snmp-mib/src/TAIL-F-TEST-MIB.mib
   > snmpwalk -c public -v2c localhost:4000 enterprises
   TAIL-F-TEST-MIB::numberOfServers.0 = INTEGER: 2
   TAIL-F-TEST-MIB::numberOfHosts.0 = INTEGER: 2
   TAIL-F-TEST-MIB::maxNumberOfServers.0 = INTEGER: 10
   TAIL-F-TEST-MIB::maxNumberOfHosts.0 = INTEGER: 10
   TAIL-F-TEST-MIB::hostEnabled."vega@tail-f.com" = INTEGER: false(2)
   TAIL-F-TEST-MIB::hostEnabled."saturn@tail-f.com" = INTEGER: true(1)
   TAIL-F-TEST-MIB::hostNumberOfServers."vega@tail-f.com" = INTEGER: 0
   TAIL-F-TEST-MIB::hostNumberOfServers."saturn@tail-f.com" = INTEGER: 2
   etc...


5b. SNMP get

   > snmpget -c public -v2c localhost:4000 TAIL-F-TEST-MIB::maxNumberOfServers.0
   TAIL-F-TEST-MIB::maxNumberOfServers.0 = INTEGER: 10


5c. SNMP set

   The default VACM (view-based access control model) configuration for
   NCS doesn't allow for updates, by means of not specifying any "write
   view" for the v1/v2c SNMP communities or usm users.

   To allow for updates via the public community we need to add a write
   view for it. This can be done via the CLI, or e.g. by means of
   ncs_cmd:

   > ncs_cmd -c \
   'mset "/snmp/vacm/group{public}/access{any no-auth-no-priv}/write-view" internet'

   The access control mechanism will now allow for set requests of 
   objects in the internet view tree, if sent with the public community.

   > snmpset -c public -v2c localhost:4000 TAIL-F-TEST-MIB::maxNumberOfServers.0 i 43
   TAIL-F-TEST-MIB::maxNumberOfServers.0 = INTEGER: 43


5d. SNMP getnext

    The 'snmptable' command can used to print an entire MIB
    table. Since the index of the table is a string in SNMP, a length
    indicator is included in the rowindex. The table is therefore sorted
    with short strings before longer strings.


   > snmptable -Ci -c public -v2c localhost:4000 TAIL-F-TEST-MIB::hostTable
   SNMP table: TAIL-F-TEST-MIB::hostTable
                index hostEnabled hostNumberOfServers hostRowStatus
     "vega@tail-f.com"       false                   0        active
   "saturn@tail-f.com"        true                   2        active

   > snmpgetnext -c public -v2c localhost:4000 TAIL-F-TEST-MIB::hostEnabled.\"kalle\"
   TAIL-F-TEST-MIB::hostEnabled."vega@tail-f.com" = INTEGER: false(2)
   > snmpgetnext -c public -v2c localhost:4000 TAIL-F-TEST-MIB::hostEnabled.\"vega@tail-f.com\"
   TAIL-F-TEST-MIB::hostEnabled."saturn@tail-f.com" = INTEGER: true(1)

6. Help
- To start the emulated network, do ncs-netsim start | help
- To start NCS, do ncs  [--verbose --foreground]
- To stop NCS, do ncs --stop
- To get a Juniper CLI into NCS, do ncs_cli -u admin

- To restart NCS from scratch, ncs-setup --reset
    this will ensure NCS is reinitialized from the ncs-cdb/*.xml files
    when restarted

- To restart the netsim network from scratch, do
    ncs-netsim stop
    ncs-netsim reset
    ncs-netsim start
       or in one swoop
    ncs-netsim restart

