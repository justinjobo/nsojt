This example illustrates how to write a user defined RFS "Resource
Facing Service".

The example uses three NCS packages. The router package introduced
in ../0-router-network and:

a) a package called 'syslog' which implements
   a simple template service whereby we can push out identical syslog
   settings to all devices in the network.

b) a package called vlan which illustrates how to create structures
   on the managed devices that are shared between multiple service instances

$ ls ./packages
router syslog vlan vlan-reactive-fastmap

To build the three packages, do

$ make all

To start the ncs-netsim network, follow the instructions in
../0-router-network, it's the same network here.

$ ncs-netsim start
DEVICE ex0 OK STARTED
DEVICE ex1 OK STARTED
DEVICE ex2 OK STARTED

All the code for this example resides in ./packages/syslog and
./packages/vlan.

To run the example we do:

$ ncs

This will start NCS, and NCS will load the three packages, load the
data models defined by the three packages and start the Java code
defined by the packages.

To instantiate the managed interfaces, we do:

$ ncs_cli -u admin
admin connected from 127.0.0.1 using console on zoe
admin@ncs> request devices sync-from
sync-result {
    device ex0
    result true
}
sync-result {
    device ex1
    result true
}
sync-result {
    device ex2
    result true
}
[ok][2012-07-17 16:07:36]
admin@ncs> configure
Entering configuration mode private
[ok][2012-07-17 16:07:39]
admin@ncs% set services syslog server 5.6.7.8
[ok][2012-07-17 16:10:12]

[edit]
admin@ncs% edit services syslog server 5.6.7.8
[ok][2012-07-17 16:10:18]

[edit services syslog server 5.6.7.8]
admin@ncs% set enabled selector 7 facility authpriv
[ok][2012-07-17 16:10:33]

[edit services syslog server 5.6.7.8]
admin@ncs% commit
Commit complete.
[ok][2012-07-17 16:09:37]

The above service creation invokes the create() method in our RFS class
in ./packages/syslog/src/java/src/com/example/syslog/SyslogServiceRFS.java
The code copies the syslog settings to all managed devices in the network.
We can inspect the result of the create() method as:

admin@ncs% request services syslog get-modifications
cli  devices {
          device ex0 {
              config {
                  r:sys {
                      syslog {
     +                    server 5.6.7.8 {
     +                        enabled;
     +                        selector 7 {
     +                            facility [ authpriv ];
     +                        }
     +                    }
     -                    server 10.3.4.5 {
     -                        enabled;
     -                        selector 8 {
     -                            facility [ auth authpriv local0 ];
     -                        }
     -                    }
                      }
                  }
              }
          }
          device ex1 {
              config {
                  r:sys {
                      syslog {
     +                    server 5.6.7.8 {
     +                        enabled;
     +                        selector 7 {
     +                            facility [ authpriv ];
     +                        }
     +                    }
     -                    server 10.3.4.5 {
     -                        enabled;
     -                        selector 8 {
     -                            facility [ auth authpriv local0 ];
     -                        }
     -                    }
                      }
                  }
              }
          }
          device ex2 {
              config {
                  r:sys {
                      syslog {
     +                    server 5.6.7.8 {
     +                        enabled;
     +                        selector 7 {
     +                            facility [ authpriv ];
     +                        }
     +                    }
     -                    server 10.3.4.5 {
     -                        enabled;
     -                        selector 8 {
     -                            facility [ auth authpriv local0 ];
     -                        }
     -                    }
                      }
                  }
              }
          }
      }
[ok][2012-07-17 16:16:01]

Another interesting thing to do with services is to dry-run them.
Create or modify an existing service and then ask NCS what it would
to if were to commit

admin@ncs% set selector 8 facility local7
[ok][2012-07-17 16:19:18]

[edit services syslog server 5.6.7.8]
admin@ncs% exit
[ok][2012-07-17 16:19:20]

[edit]
admin@ncs% commit dry-run
cli  devices {
         device ex2 {
             config {
                 r:sys {
                     syslog {
                         server 5.6.7.8 {
    +                        selector 8 {
    +                            facility [ local7 ];
    +                        }
                         }
                     }
                 }
             }
         }
         device ex1 {
             config {
                 r:sys {
                     syslog {
                         server 5.6.7.8 {
    +                        selector 8 {
    +                            facility [ local7 ];
    +                        }
                         }
                     }
                 }
             }
         }
         device ex0 {
             config {
                 r:sys {
                     syslog {
                         server 5.6.7.8 {
    +                        selector 8 {
    +                            facility [ local7 ];
    +                        }
                         }
                     }
                 }
             }
         }
     }
[ok][2012-07-17 16:19:26]

To study this example, first take a look at the file
packages/syslog/package-meta-data.xml.  It defines one component
which is

  <component>
    <name>syslog</name>
    <callback>
      <java-class-name>com.example.syslog.SyslogServiceRFS</java-class-name>
    </callback>
  </component>

This means that the class SyslogServiceRFS implements one
of the service interfaces.

The code itself illustrates several interesting points.

- How to define a service

- It uses Navu to walk down into the tree.

- To start the emulated network, do ncs-netsim start | help
- To start NCS, do ncs  [--verbose --foreground]
- To stop NCS, do ncs --stop
- To get a Juniper CLI into NCS, do ncs_cli -u admin

- To restart NCS from scratch, ncs-setup --reset
    this will ensure NCS is reinitialized from the ncs-cdb/*.xml files
    when restarted

- To restart the netsim network from scratch, do
    ncs-netsim stop
    ncs-netsim reset
    ncs-netsim start
       or in one swoop
    ncs-netsim restart

---------------- The vlan package - shared data among services ---------------


The Java code in
./packages/vlan/src/java/src/com/example/vlan/VlanServiceRFS.java is
interesting to study. It uses NavuList.sharedCreate() instead of
NavuList.create().

This is because the service creates data in

/devices/device/config/r:sys/interfaces/interface

that is shared between multiple service instances, for example if we
run:

set services vlan s1 description x iface ethX unit 1 vid 3
set services vlan s2 description x iface ethX unit 2 vid 4
commit

Both services "share" the interface called "ethX" and the service Java
code both "creates" the interface called "ethX".
The way FASTMAP works, is that it deletes the results of a service
instance and then invokes create() again.

If normal NavuList.create() had been used, if we were to later go back
and modify one of the services as in:

set services vlan s1 vid 5
commit

That would then automatically also remove all the things done by service s2.
The solution is to use NavuList.sharedCreate(), NavuContainer.sharedCreate()
whenever we create structures we know are shared between service instances.

If we take a look at the output of:

admin@ncs% show devices device ex0 config r:sys
interfaces {
    /* Refcount: 2 */
    interface ethX {
        /* Refcount: 1 */
        unit 1 {
            enabled;
            description x;
            vlan-id     3;
        }
        /* Refcount: 1 */
        unit 2 {
            enabled;
            description x;
            vlan-id     4;
        }
    }
}
...

We see that there are reference counters (as attributes) on the list
entries. We have two (2) services using the /interfaces/interface[name="ethX"]
list entry and then one each for the units.
Also in NETCONF output, we see the same reference counters

$ netconf-console --get-config -x \
    /devices/device/config/sys/interfaces/interface

?xml version="1.0" encoding="UTF-8"?>
<rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="1">
  <data>
    <devices xmlns="http://tail-f.com/ns/ncs">
      <device>
        <name>ex0</name>
        <config>
          <sys xmlns="http://example.com/router">
            <interfaces>
              <interface refcounter="2">
                <name>ethX</name>
                <unit refcounter="1">
                  <name>1</name>
                  <enabled>true</enabled>
                  .......
