Single Sign-On
~~~~~~~~~~~~~~

This example demonstrates how to integrate and use the cisco-nso-saml2-auth
Authentication Package to enable SAMLv2 Single Sign-On for NSO.

For more information on using the cisco-nso-saml2-auth package refer to the
README file distributed with the package, e.g. in
$NCS_DIR/packages/auth/cisco-nso-saml2-auth.

In order for the cisco-nso-saml2-auth package to run, the flask-saml2 Python
package is required and it also needs patching to use SHA-256 instead of
SHA-1 digest. A simple way to fulfill this requirement is to create a Python
virtualenv and start NSO within this virtualenv. The build steps needed are
done with the Makefile targets, but note that the virtualenv needs to be
activated manually before starting NSO.

Note that idp.py uses the flask-saml2 test certificates and keys.


Running the Example
~~~~~~~~~~~~~~~~~~~

  1. Build the necessary files, copy the example ncs.conf, activate the
     Python virtualenv, and start NSO by typing

         $ make clean all
         $ ncs-setup --dest .
         $ cp ncs.conf.example ncs.conf
         $ . pyvenv/bin/activate
         (pyvenv) $ make start

  2. Start the CLI and reload packages

         $ ncs_cli -u admin -g admin -C
         # packages reload

  3. Configure the cisco-nso-saml2-auth model. This is simplest done by
     loading the prepared config XML file, but can also be done manually in
     the CLI (see cisco-nso-saml2-auth documentation for details).

         $ ncs_load -l -m cisco-nso-saml2-auth.xml

  4. Start the bundled IdP server in another terminal

         $ make start-idp

  5. Visit a resource that requires authentication in a web browser, e.g.
     the NSO webui. Note that access is denied and the normal login prompt
     is presented.

         http://localhost:8080/

  6. Inspect the NSO SSO SAML metadata

         $ curl http://localhost:8080/sso/saml/metadata/

  7. Visit the SAML SSO endpoint (note the trailing slash). The web browser
     is redirected to the IdP server, where a simple login is presented.
     When login is done, the web browser is redirected back to the NSO SAML
     ACS (Assertion Consumer Service) and is presented with a HTTP 200, a
     session cookie, and the payload "ok".

         http://localhost:8080/sso/saml/login/

  8. Visit a resource that requires authentication in a web browser again,
     e.g. the NSO webui. This time access is granted!

         http://localhost:8080/

  9. Check package and audit logs for debug and authentication information.

        $ tail logs/ncs-python-saml2-auth.log

        $ tail logs/audit.log

  10. Logout with Single Logout by visiting the SAML SLO endpoint. The NSO
      session is deleted.

         http://localhost:8080/sso/saml/logout/


References
~~~~~~~~~~

Assertions and Protocols for the OASIS Security Assertion Markup Language
(SAML) V2.0

    https://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf


flask-saml2

    https://github.com/mx-moth/flask-saml2


License
~~~~~~~

The idp.py file is based on example/idp.py from flask-saml2.

See LICENSE and flask-saml2/LICENSE for further details.
