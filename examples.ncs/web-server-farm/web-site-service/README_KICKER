Kicker Example
==============

Introduction
------------
The following is an illustration of the kicker functionality.
Kickers are a declarative way of invoking actions from events like
CDB data changes (data-kicker) or netconf notifications (notification-kicker).
The programming part of a kicker consists only of implementing a suitable
action (if it does not already exist).

The action invocation are performed in one of two ways:

1) If the action input parameters are consistent with the
kicker:action-input-param grouping in the tailf-kicker.yang then
the following parameters are supplied with the invocation
   Id    - The kicker id
   Path  - The path to the subtree containing the change
   Tid   - The transaction id for a synthetic transaction containing the change

2) In other cases than above the action is invoked with an empty parameter list.


The supplied transaction is synthetic in the respect that it contains the
changes that lead to the kicker triggering, but it is a copy of the original
transaction that is already committed. Therefore this transaction might no
longer reflect the current CDB data. The usage of this transaction is
normally for attach and diff-iteration for further processing in the action.

A data-kicker has a "monitor" which pinpoints the subtree under which changes
should trigger the kicker. There is also a "trigger-expr" that is a XPATH
expression which acts as a filter of which changes should trigger the kicker.

A notification-kicker are aware of all notifications received by subscriptions
under /ncs:devices/device/netconf-notification/subscription.
The notification-kicker has a "selector-expr" that is an XPATH expression
that filters out the notifications that should trigger the kicker.
Under evaluation of the "selector-expr" there are 3 variable bindings that are
predefined for the XPATH evaluation.
   * DEVICE            - The name of the device emitting the notification.
   * SUBSCRIPTION_NAME - The name of the subscription receiving the notification
   * NOTIFICATION_NAME - The name of current notification

For more on how to define kickers see the tailf-kicker.yang YANG module.


Example
-------

This example illustrates both the setup of a simple data-kicker as well as
a notification-kicker.
Both kickers will use the same action which is defined in the website-service
package. The following is the yang snippet for the action definition
from the website.yang file:

module web-site {
  namespace "http://examples.com/web-site";
  prefix wse;

  ...

  augment /ncs:services {

    ...

    container actions {
      tailf:action diffcheck {
        tailf:actionpoint diffcheck;
        input {
          uses kicker:action-input-params;
        }
        output {
        }
      }
    }
  }

}


The implementation of the action can be found in the WebSiteServiceRFS.java
class file. Since it takes the kicker:action-input-params as input, the Tid
for the synthetic transaction is available. This transaction is attached and
diff-iterated. The result of the diff-iteration is printed in the
ncs-java-vm.log.

class WebSiteServiceRFS {

    ....

    @ActionCallback(callPoint="diffcheck", callType=ActionCBType.ACTION)
    public ConfXMLParam[] diffcheck(DpActionTrans trans, ConfTag name,
                                   ConfObject[] kp, ConfXMLParam[] params)
    throws DpCallbackException {
        try {

            System.out.println("-------------------");
            System.out.println(params[0]);
            System.out.println(params[1]);
            System.out.println(params[2]);

            ConfUInt32 val = (ConfUInt32) params[2].getValue();
            int tid = (int)val.longValue();

            Socket s3 = new Socket("127.0.0.1", Conf.NCS_PORT);
            Maapi maapi3 = new Maapi(s3);
            maapi3.attach(tid, -1);

            maapi3.diffIterate(tid, new MaapiDiffIterate() {
                // Override the Default iterate function in the TestCase class
                public DiffIterateResultFlag iterate(ConfObject[] kp,
                                                     DiffIterateOperFlag op,
                                                     ConfObject oldValue,
                                                     ConfObject newValue,
                                                     Object initstate) {
                    System.out.println("path = " + new ConfPath(kp));
                    System.out.println("op = " + op);
                    System.out.println("newValue = " + newValue);
                    return DiffIterateResultFlag.ITER_RECURSE;

                }

            });


            maapi3.detach(tid);
            s3.close();


        return new ConfXMLParam[]{};

        } catch (Exception e) {
            throw new DpCallbackException("diffcheck failed", e);
        }
    }
}


We are now ready to start the website-service example and define our kickers.
Do the following:


$ make all

$ ncs-netsim start

$ ncs

$ ncs_cli -C -u admin

admin@ncs# devices sync-from
sync-result {
    device lb0
    result true
}
sync-result {
    device www0
    result true
}
sync-result {
    device www1
    result true
}
sync-result {
    device www2
    result true
}



The kickers are defined under the hide-group "debug". To be able to
show and declare kickers we need first to unhide this hide-group:

admin@ncs# config
admin@ncs(config)# unhide debug


We now define a data-kicker for the "profile" list under the by the service
augmented container "/services/properties/wsp:web-site":


admin@ncs(config)# kickers data-kicker a1 \
> monitor /services/properties/wsp:web-site/profile \
> kick-node /services/wse:actions action-name diffcheck

admin@ncs(config-data-kicker-a1)# commit
admin@ncs(config-data-kicker-a1)# top
admin@ncs(config)# show full-configuration kickers data-kicker a1
kickers data-kicker a1
 monitor     /services/properties/wsp:web-site/profile
 kick-node   /services/wse:actions
 action-name diffcheck
!


We now commit a change in the profile list and we use the "debug kicker"
pipe option to be able to follow the kicker invocation:


admin@ncs(config)# services properties web-site profile lean lb lb0
admin@ncs(config-profile-lean)# commit | debug kicker
kicker: a1 at /ncs:services/... changed, invoking diffcheck
Commit complete.

admin@ncs(config-profile-lean)# top
admin@ncs(config)# exit


We can also check the result of the action by looking into the ncs-java-vm.log:

admin@ncs# file show logs/ncs-java-vm.log

In the end we will find the following printout from the diffcheck action:

-------------------
{[669406386|id], a1}
{[669406386|monitor], /ncs:services/properties/web-site/profile{lean}}
{[669406386|tid], 168}
path = /ncs:services/properties/wsp:web-site/profile{lean}
op = MOP_CREATED
newValue = null
path = /ncs:services/properties/wsp:web-site/profile{lean}/name
op = MOP_VALUE_SET
newValue = lean
path = /ncs:services/properties/wsp:web-site/profile{lean}/lb
op = MOP_VALUE_SET
newValue = lb0
[ok][2017-02-15 17:11:59]



We now turn to creating an notification kicker.
The website-service example has devices that has netconf notifications
generated on the stream "interface". We start with defining the notification
kicker for a certain SUBSCRIPTION_NAME = "mysub". This subscription does not
exist for the moment and the kicker will therefore not be triggered:


admin@ncs# config

admin@ncs(config)# kickers notification-kicker n1 \
> selector-expr "$SUBSCRIPTION_NAME = 'mysub'" \
> kick-node /services/wse:actions \
> action-name diffcheck

admin@ncs(config-notification-kicker-n1)# commit
admin@ncs(config-notification-kicker-n1)# top

admin@ncs(config)# show full-configuration kickers notification-kicker n1
kickers notification-kicker n1
 selector-expr "$SUBSCRIPTION_NAME = 'mysub'"
 kick-node     /services/wse:actions
 action-name   diffcheck
!


Now we define the "mysub" subscription on a device "www0" and refer to
the notification stream "interface". As soon as this definition is committed
the kicker will start triggering:

admin@ncs(config)# devices device www0 netconf-notifications \
> subscription mysub \
> local-user admin stream interface
admin@ncs(config-subscription-mysub)# commit


admin@ncs(config-profile-lean)# top
admin@ncs(config)# exit


If we now inspect the ncs-java-vm.log we will see a number of notifications
that are received. We also see that the transaction that is diff-iterated
contains the notification as data under the path
/devices/device/netconf-notifications/received-notifications/notification/data.
This is a operational data list. However this transaction is synthetic and will
not be committed. If the notification will be stored CDB is optional and not
depending on the notification kicker functionality:

admin@ncs# file show logs/ncs-java-vm.log


-------------------
{[669406386|id], n1}
{[669406386|monitor], /ncs:devices/device{www0}/netconf.../data/linkUp}
{[669406386|tid], 758}
path = /ncs:devices/device{www0}
op = MOP_MODIFIED
newValue = null
path = /ncs:devices/device{www0}/netconf...
op = MOP_CREATED
newValue = null
path = /ncs:devices/device{www0}/netconf.../event-time
op = MOP_VALUE_SET
newValue = 2017-02-15T16:35:36.039204+00:00
path = /ncs:devices/device{www0}/netconf.../sequence-no
op = MOP_VALUE_SET
newValue = 0
path = /ncs:devices/device{www0}/netconf.../data/notif:linkUp
op = MOP_CREATED
newValue = null
...



We end by removing the kicker and the subscription:

admin@ncs# config
admin@ncs(config)# no kickers notification-kicker
admin@ncs(config)# no devices device www0 netconf-notifications subscription
admin@ncs(config)# commit
