

1. Introduction

    This example illustrates how to create q-in-q tunnel in a data center
    using NCS. The implementation is implemented by using the template
    mechanism of NCS.
    In data centers it is often desirable to be able to separate traffic
    at layer2 between different customers or to be able to virtualize a
    complete data center. One way to achieve this is to setup Q-in-Q (dot1q)
    tunneling to create layer2 VPN's.

    In this example we will create two different customer networks spanning
    different edge and core switches. The network consists of Cisco and Pica8
    devices. For an overview of the network please refer to the network.pdf
    picture included in the example.

    We have created a service model that defines a customer QinQ VPN. See
    the YANG file: packages/qinq-template/src/yang/qinq-template.yang

2. Starting the Example

    Make sure you start clean, ie. no old configuration data is present.
    If you have been running this or some other example before, be sure to stop
    NCS and the simulated network. Output like 'connection refused (stop)'
    means no previous NCS was running and
    'DEVICE c0 connection refused (stop)...' no simulated network was running.

    $ ncs --stop
    $ ncs-netsim stop
    $ make clean

    Running towards an emulated network with 3 Cisco IOS switches and
    4 Pica8 switches.

    1) Run make all to setup the emulated network and build
       our service package.

       $ make all

       This creates the emulated network in ./netsim

    3) Start the simulated network

       $ ncs-netsim start

    4) Start ncs

       $ ncs

    5) Connect to the NCS CLI

       $ ncs_cli -u admin

3. Configuring the service

    We start off by syncing from device. In the NCS CLI:

       request devices sync-from

    And then we enter configuration mode.

       configure

    First we configure customer1 according to the network picture. We start
    off with setting the S-VLAN that the customer1's network will use.
    NOTE, there are no guards preventing using the same S-VLAN between the
    Java based service and the template based service. If you experiment
    with this you should keep track of that yourself.

       set qinq-template customer1 s-vlan 444

    Configure the edge switches p0, p1 and p2

       set qinq-template customer1 edge-switch p0 trunk-interface ae10
       set qinq-template customer1 edge-switch p0 edge-interface ge-1/1/1 c-vlan [ 13 15 ]

       set qinq-template customer1 edge-switch p1 trunk-interface ae10
       set qinq-template customer1 edge-switch p1 edge-interface ge-1/1/1 c-vlan [ 15 ]

       set qinq-template customer1 edge-switch p2 trunk-interface ae10
       set qinq-template customer1 edge-switch p2 edge-interface ge-1/1/1 c-vlan [ 13 ]

    Configure the core switches c1 and c2

       set qinq-template customer1 core-switch c1 trunk-interface [ "1/1" "1/2" ]

       set qinq-template customer1 core-switch c2 trunk-interface [ "1/1" "1/2" ]

    Commit the changes:

       commit

    Configure customer2:

    Set the core vlan id for customer2

       set qinq-template customer2 s-vlan 777

    Configure the edge switches c0 and p2

       set qinq-template customer2 edge-switch c0 trunk-interface "1/2"
       set qinq-template customer2 edge-switch c0 edge-interface "1/0" c-vlan [ 13 15 ]

       set qinq-template customer2 edge-switch p2 trunk-interface ae10
       set qinq-template customer2 edge-switch p2 edge-interface ge-1/1/2 c-vlan [ 13 ]
       set qinq-template customer2 edge-switch p2 edge-interface ge-1/1/3 c-vlan [ 15 ]

    Configure the core switches c1 and c2

       set qinq-template customer2 core-switch c1 trunk-interface [ "1/1" "1/2" ]

       set qinq-template customer2 core-switch c2 trunk-interface [ "1/1" "1/2" ]


    A very useful tool is commit dry-run. It lets you look at what device
    configuration which will be sent to the devices if we commit the service
    configuration we just added. In this case we will also use the extra
    parameters 'outformat native' to view the configuration changes sent to the
    actual device.

        commit dry-run outformat native

    The resulting information is rather big but lets look at output for
    Cisco devices c0 and c1, the edge and one of the core switches.

        device c0 {
          vlan 777
          !
          interface FastEthernet1/0
           switchport access vlan 777
           switchport mode dot1q-tunnel
           spanning-tree bpduguard enable
           spanning-tree portfast
          exit
          interface FastEthernet1/2
           switchport mode trunk
           switchport trunk allowed vlan 777
          exit
        }
        device c1 {
          vlan 777
          !
          interface FastEthernet1/1
           switchport trunk allowed vlan 444,777
          exit
          interface FastEthernet1/2
           switchport trunk allowed vlan 444,777
          exit
        }

    Note this is the configuration change and not the complete device
    configuration.
    We can see that the edge and core interfaces are setup with the appropriate
    S-VLAN. One thing to note here is the configuration for c1 where both
    S-VLAN 444 and 777 are allowed on the trunks since they used by both
    customer networks.

    We commit the changes

        commit


4. NCS Power Tools

    NCS comes loaded with a number of extremely useful features and tools for
    provisioning configuration changes and maintaining service configuration
    integrity.

    commit dry-run as shown above is one of them. This section will use it
    gain and also show the power of NCS.

    With very big customer networks changing for example the S-VLAN will be a
    challenge. Using NCS this becomes rather easy.

    We change the S-VLAN for customer2 to 200:

        set qinq-template customer2 s-vlan 200

    Again we use commit-dry-run to look at the resulting changes to the devices.

        commit dry-run outformat native

    The output is quite long only the output for the Cuisco switches are shown
    here. vlan 777 is replaced by 200

        device c0 {
          no vlan 777
          vlan 200
          !
          interface FastEthernet1/0
           switchport access vlan 200
          exit
          interface FastEthernet1/2
           switchport trunk allowed vlan 200
          exit
        }
        device c1 {
          no vlan 777
          vlan 200
          !
          interface FastEthernet1/1
           switchport trunk allowed vlan 200,444
          exit
          interface FastEthernet1/2
           switchport trunk allowed vlan 200,444
          exit
        }
        device c2 {
          no vlan 777
          vlan 200
          !
          interface FastEthernet1/1
           switchport trunk allowed vlan 200,444
          exit
          interface FastEthernet1/2
           switchport trunk allowed vlan 200,444
          exit
        }

    You can see from the output that NCS will automatically reconfigure all
    affected devices.

        commit
