== Virtual MPLS Layer3 VPN Example

=== Example Overview

This example illustrates Layer3 VPNs in a service provider MPLS network
with virtual PE routers (vPE). This README file contains information related
to the development of the example and the l3vpn service.

=== Packages

All packages and NEDs used in this example are example packages only,
regardless of their similarity in name and function as official packages
and NEDs.

.l3vpn
This package contains the datamodel and service mapping for the actual
l3vpn service.

.l3vpnui
This package contains the custom Web UI widget used for the example.

.weblog
This provides an interface to publish log messages to show the progress of
the service creation, mainly for demonstration purposes.

.resource-manager-example
This packages in cooperation with ipaddress-allocator and id-allocator
handles the dynamic allocation of ipaddresses and vlan id:s that are
set-up as a result of the l3vpn tunnel set-up request.

.vm-manager-example
This package in cooperation with vm-manager-esc handles the start and stop
of the virtual routers.

.NED Packages
In addition to the other packages above three different NED packages
will be copied to the example environment during the build process:
esc-example, cisco-ios-example, cisco-iosxr-example and juniper-junos-example.

=== Service Mapping

The service mapping in this example is done using a mix of
Java and configuration templates.

The Java code contains the logic for deriving what PE routers and QOS
templates to use (described in more detail below).  The Java code only
sets abstract parameters used in the templates and is completely
decoupled from the mapping to the actual device configuration.

The configuration templates use parameters set from the Java code as
well as declarative references directly to attributes in the service
mode. The templates maps these parameters to the data model
representation of device configuration for all device types in the
network.

Service-Model
     !
Java Mapping Logic
     !
     !-Vendor-independant variables
     !
Template
     !
Vendor Device Model

==== Java Service Logic

The Java service logic is found in the l3vpn package and the relevant
Java file is l3vpn/src/java/src/com/example/l3vpn/l3vpnRFS.java.

A new l3vpn service instance is basically a list of endpoints, where each
endpoint is a reference to a CE device and the local interface on it. The logic
in the Java code has the following outline:

FOR EACH endpoint
// VPN related logic
	if CE device is on a vPE (onvpe list):
		see "CE on vPE reactive fastmap flow" in next section
		the rest of the config will not be executed until this is completed
        for the current endpoint
    lookup what PE device the CE device is connected to using the topology
    set global VPN config template parameters (as-number etc.)
    set CE router config template parameters
    set PE router config template parameters
    apply ce-router feature template
    apply pe-router feature template

// QOS related logic
    lookup QOS policy referenced from l3vpn service instance
    set QOS classification parameters
    set QOS marking/policing parameters
    apply CE/PE classification template
    apply CE/PE marking template

    merge QOS policy global and service classification ACL information
    set QOS classification access list parmeters
    apply QOS ACL template
END


==== CE on vPE reactive fastmap flow

// Each step must be completed for the next to start
//
Start vPE and continue with next endpoint until started
    A service *redeploy* is issued when the start
    is completed. Handled by package vm-manager.
    This step will cause 4 extra commits:
        vm-service creation
        device creation
        ssh fetch keys
        sync-from
Allocate id for CE-vPE connection and continue with next
    endpoint until allocation is completed. A service *redeploy*
    is issued when completed. Handled by
    package id-allocator.
Allocate addresses for CE-vPE connection and continue with
    next endpoint until is allocation completed. A service *redeploy*
    is issued when allocation is completed. Handled by
    package ipaddress-allocator.
Create topology connection for CE-vPE
Allocate id for P-vPE connection and continue with next
    endpoint until allocation is completed. A service *redeploy*
    is issued when allocation is completed. Handled by
    package id-allocator.
Allocate addresses for P-vPE connection and continue with
    next endpoint until allocation is completed. A service *redeploy*
    is issued when allocation is completed. Handled by
    package ipaddress-allocator.
Create topology connection for P-vPE


==== Feature Templates
The l3vpn package includes the following feature configuration
templates:

l3vpn-acl.xml            - Access list configuration related to QOS
l3vpn-ce.xml             - CE router VPN configuration
l3vpn-pe.xml             - PE router VPN configuration
l3vpn-qos-class.xml      - CE QOS classification configuration
l3vpn-qos-pe-class.xml   - PE QOS classification configuration
l3vpn-qos-pe.xml         - PE QOS marking and policing configuration
l3vpn-qos.xml            - CE QOS marking and policing configuration
l3vpn-vm-manager.xml     - vPE router launch configuration


The vm-manager-esc package includes the following feature configuration
templates:
vm-manager-esc-interface.xml - ESC tenant interface configuration
vm-manager-esc-scaling.xml   - ESC tenant scaling configuration
vm-manager-esc-tenant.xml    - ESC tenant configuration
