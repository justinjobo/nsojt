* Introduction

  This example illustrates the SNMP notification receiver.

  We show a Java handler that raises an alarm whenever it
  receives an SNMP notification.

* Files

  The YANG models and the scripts/makefiles to compile/start/stop the
  individual managed devices (i.e., ConfD instances) reside under
  ${NCS_DIR}/examples.ncs/support/snmp-ned/basic.

  The NCS instance is run from this directory, which contains the
  following files:

    ncs-cdb/                  - NCS's database directory
        ncs_init.xml          - initial configuration data for this example
    logs/                     - directory for log files
    packages/snmp-notif-recv  - package containing an application component
                                which constitutes the example code
    state/                    - directory where ncs store state information

  After "make all", the following files are created:

    packages/snmp-notif-recv/private-jar - the java archive ex-notif-rec.jar
                                           containing the compiled example code


* Running the example

  Build everything by doing:

    $ make all

  Then start NCS:

    $ make start

  At this point both NCS and the Java machine is started.

  In one shell, start a NCS CLI:

    $ make cli

  Check the current alarms:

    admin@host> show alarms alarm-list

  This list should be empty.

  The NCS SNMP notification receiver is configured to listen at UDP 
  port 8000. 

  admin> show configuration snmp-notification-receiver 
  enabled;
  listen {
      udp 0.0.0.0 8000;
  }

  The notification receiver will listen to notifications from any
  managed-device configured in NCS. If the notification sender address
  differs from the IP Address used for management, this can be
  configured explicitly in the
  /ncs/managed-device/snmp-notification-address leaf.  Next, in
  another shell, simulate that a managed device sends an SNMP
  notification:

    $ ./sendnotif.sh 127.0.0.1 8000 1

  The Java handler now receives this notification, and generates a
  random alarm.  Note that this requires us to have a managed-device
  at address 127.0.0.1, if not, the notification will be dropped.
  Check it in the NCS CLI:

    admin@host> show alarms alarm-list

  This list should now contain an alarm.


* Tools

  The sendnotif.sh script uses the Snmp4j SnmpRequest console to generate
  and send traps.

  The sent trap will be of type IF-MIB::linkDown

  The usage is 
  $ sh sendnotif.sh <ip> <port> <data>
  as in:
  $ sh sendnotif.sh 127.0.0.1 8000 1


  It is also possible to use snmptrap to send notifications.  Here are
  a couple of examples:

    $ export SNMP_PERSISTENT_FILE=/dev/null

    # send a v1 trap
    $ snmptrap -v1 -c foo 127.0.0.1:8000 1.3.6.1.4.1.3.1.1 10.0.0.1 1 1 100

    # send a v2c notification
    $ snmptrap -v2c -c foo 127.0.0.1:8000 100 1.3.6.1.4.1.3.1.1

    # send a v2c inform
    $ snmpinform -v2c -c foo 127.0.0.1:8000 100 1.3.6.1.4.1.3.1.1

    # send an authPriv v3 notification
    $ snmptrap -v3 -u ncs -l authPriv -a SHA -A authpass -x aes -X privpass\
        127.0.0.1:8000 100 1.3.6.1.4.1.3.1.1

    # send an authPriv v3 inform
    $ snmpinform -v3 -u ncs -l authPriv -a SHA -A authpass -x aes -X privpass\
        127.0.0.1:8000 100 1.3.6.1.4.1.3.1.1


* Mapping SNMP notifications (traps) to NCS alarms

  NCS comes with a pre-defined Alarm Manager. The Alarm Manager can be
  fed with alarms from various sources including SNMP traps. See the
  NCS User Guide for details on the Alarm Manager. It is important to
  realize that there is not a one-to-one mapping between traps and
  alarms. Not all traps are alarms, and the trap information
  (var-binds) in most cases needs enrichment in order to present
  useful alarms to the users. This is done in Java.  See 
  packages/snmp-notif-recv/src/java/src/com/example/snmpnotificationreceiver

  First of all NCS maps individual notifications to state changes on alarms.
  An alarm is identified by the device, an object within the device and an
  alarm type. NCS uses hierarchical YANG identities to identify alarm types.
  
  Creating these three keys is the first task of the Java code:
  Alarm al = new Alarm(new ManagedDevice(...), 
                       new ManagedObject(...),
                       new ConfIdentityRef(...)

  The mapping code also needs to define alarm state change information
  like severity and alarm text:
  Alarm al = new Alarm(...
                       inc.status_changed.severity,
                       inc.status_changed.alarmText,

  Finally send the alarm state change to the NCS Alarm Manager:
  AlarmSink = new AlarmSink()
  sink.submitAlarm(al)


Stopping the Example
-------------------

When you are ready with this example make sure all daemons are stopped. Stop
NCS and then the simulated network:

$ make stop 

Clean all created files:

$ make clean


