
This example runs 3 devices that use a proprietary XML-RPC
interface for configuration.  The Java code for the NCS generic ned
is found as two packages:

./packages/xml-rpc - the generic ned code
./packages/common  - common java archives used by the generic ned

The java code for the faked managed devices are found separately under
directory devices

./devices/device-common - common code for the devices
./devices/device-x1     - device 1 code and working dir
./devices/device-x2     - device 2 code and working dir
./devices/device-x3     - device 3 code and working dir

Thus in this example we have an architecture that looks like:

                       -------
                       | NCS  |
                       -------
                          |
                          |
__________________________|_______________________
     |                |               |
     |                |               |
     x1               x2              x3


Where NCS speaks XML-RPC through a generic NED to three managed devices.
The XML-RPC rpc calls are defined in
./devices/device-common/src/com/example/xmlrpcdevice

and the NED code, which executes in the NCS service manager resides in
./packages/xml-rpc/src/java/src/com/example/xmlrpcdevice/xmlrpc

The example is self contained and the apache xmlrpc code is part
of the example. It resides in
./packages/common/shared-jar


The devices use a small yang model found under
./packages/xml-rpc/src/yang/interfaces.yang
and accordingly we have XML RPCs defined to manipulate such data in
each XML RPC server.


If we execute

# make all

in this directory, the following will happen:

- The managed device modules,is compiled and the exec environ is
  created for all 3 managed devices.

- YANG files are imported and compiled

(Note: The make target REMAKE executes everything:
  stop clean all start status
 this includes clean of the cdb database which removes
 all changes that have been made by running the example)

# make start

Starts all 3 XML-RPC servers instances and also starts
In addition, java code
needed to configure the devices is started. The NCS server is
initialized with managed device data populating the tailf-ncs
namespace with appropriate managed device data, such as at which IP/port
each managed device resides as well as auth data - i.e. how do we ssh
to each managed device.

Start configuring the devices by executing

# make cli

admin@zoe% configure
Entering configuration mode private
[ok][2011-02-23 13:56:31]

[edit]
admin@zoe% request devices sync-from
sync-result {
    device x1
    result true
}
sync-result {
    device x2
    result true
}
sync-result {
    device x3
    result true
}
[ok][2011-12-12 16:51:40]

[edit]
admin@zoe% set devices device x1..3 config if:interface eth0 mtu 1200
[ok][2011-12-12 16:52:56]

[edit]
admin@zoe% commit | details
entering validate phase for candidate...
  validate: grabbing transaction lock... ok
entering write phase for candidate...
entering prepare phase for candidate...
entering commit phase for candidate...
entering validate phase for running...
  validate: grabbing transaction lock... ok
  validate: creating rollback file... ok
  validate: pre validate... ok
  validate: run validation dependencies...
  validate: validation dependencies done
  validate: run full validation...
  validate: full validation done
  validate: check configuration policies...
  validate: configuration policies done
entering write phase for running...
  write_start cdb
entering prepare phase for running...
  prepare cdb
  ncs: Prepare phase
  ncs: Connecting NED x3

  ncs: Connecting NED x1

  ncs: Connecting NED x2

  ncs: Device: x3 Send NED prepare
  ncs: Device: x2 Send NED prepare
  ncs: Device: x1 Send NED prepare
entering commit phase for running...
  commit cdb
  ncs: Commit phase
  ncs: Device: x3 Send NED commit
  ncs: Device: x2 Send NED commit
  ncs: Device: x1 Send NED commit
  ncs: Device: x1 Send NED persist
  ncs: Device: x2 Send NED persist
  ncs: Device: x3 Send NED persist
Commit complete.
[ok][2011-12-12 16:53:06]




It's instructive to turn on NED trace, do:

admin@zoe% set devices global-settings trace pretty
[ok][2011-12-12 16:53:59]

[edit]
admin@zoe% commit
Commit complete.
[ok][2011-12-12 16:54:01]

[edit]
admin@zoe% request devices disconnect
[ok][2011-12-12 16:54:07]



and followup with:

admin@zoe% set devices device x1..3 config if:interface eth0 mtu 1300
[ok][2011-12-12 16:54:28]

[edit]
admin@zoe% commit
Commit complete.
[ok][2011-12-12 16:54:30]


Now we can do in the UNIX shell

# cat logs/ned-x1.trace
>> dd-mm-yyyy::hh:mi:ss.nnn GENERIC CONNECT to x1-127.0.0.1:8045 as admin
<< dd-mm-yyyy::hh:mi:ss.nnn CONNECTED 1
>> dd-mm-yyyy::hh:mi:ss.nnn PREPARE 1:
modified   /if:interface[name="eth0"]
value_set  /if:interface[name="eth0"]/mtu 1300
<< dd-mm-yyyy::hh:mi:ss.nnn PREPARE OK
>> dd-mm-yyyy::hh:mi:ss.nnn COMMIT 1: (Timeout 0)
<< dd-mm-yyyy::hh:mi:ss.nnn COMMIT OK
>> dd-mm-yyyy::hh:mi:ss.nnn PERSIST 1:
<< dd-mm-yyyy::hh:mi:ss.nnn PERSIST OK
>> dd-mm-yyyy::hh:mi:ss.nnn CLOSE 1: (Pool: true)
<< dd-mm-yyyy::hh:mi:ss.nnn CLOSED

When you are ready with this example make sure all daemons are stopped.

# make stop

Clean all created files:

# make clean
