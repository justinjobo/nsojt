* Introduction

  This example shows how to manage 3 SNMP devices with NCS.

  The 3 devices are emulated using "ncs-netsim".  One device speaks
  SNMPv1, one SNMPv2, and the third SNMPv3 with authentication and
  encryption.

  To run this example, a properly installed NCS system is
  required. Furthermore, it is required that NCS_DIR is set to point
  to this installations. The best way to do that is to source the
  ncsrc script (found in the top dir of the installation).

* Files

  The NCS instance is run from this directory, which contains the
  following files:

    packages/ex-snmp-ned/       - NED package for the example SNMP
                                  device.  This package contains all
                                  MIBs for our SNMP devices.
      src/mibs/
        BASIC-CONFIG-MIB.mib    - MIB implemented by the device
        BASIC-CONFIG-MIB.miba   - annotation file for the device data
                                  model, with directives to NCS
        SNMPv2-MIB.mib          - MIB implemented by the device
      netsim/                   - Directory with files used to simulate
                                  the SNMP devices with "ncs-netsim"
    ncs-cdb/                    - NCS's database directory
        ncs_init.xml            - initial configuration data for this
                                  example
        aaa_init.xml            - initial aaa data for NCS users


                                  implemented by the devices, and
                                  annotation files
    logs/                       - directory for log files
    state/                      - directory for NCS runtime state


* Adding device data models

  Just as with other devices, before managing an SNMP device, its data
  models must be imported into NCS.  With SNMP, the data models are
  defined in MIBs.  These MIBs must be converted to YANG data models,
  and the YANG data models must be compiled like for other devices.
  This is taken care of the by using the ncs compiler command
  "--ncs-compile-mib-bundle".

  In this example, we have created a NCS package with the MIBs the
  devices implement.  The command "ncs-make-package" can be used to
  create a package given a set of MIBs that a device implements.

  The package we have create is used for two things:

    1.  tell NCS about the MIBs the devices implement

    2.  use netsim to simulate these devices

  We will not go into the details of the second item here.  The code
  for the second item is found in packages/ex-snmp-ned/netsim.


** Adding annotations to NCS

  As explained in the User Guide, in the "Network Element Drivers"
  chapter, MIBs often need to be annotated with additional information
  used by NCS to build proper SET PDUs for the device.

  We examine the MIBs that the devices implement, and find this object:

    bscActFlow OBJECT-TYPE
        SYNTAX      Integer32
        MAX-ACCESS  read-create
        STATUS      current
        DESCRIPTION
            "Can only be changed when admin state is locked."
        ::= { bscActEntry 4 }

  So we need to instruct NCS that if this object is modified, it must
  first set bscActAdminState to "locked", then modify bscActFlow, then
  reset bscActAdminState to "unlocked" (if it was "unlocked" when we
  started).

  This is done in a file BASIC-CONFIG-MIB.miba, where we add the
  following lines:

    bscActAdminState  ned-set-before-row-modification = locked
    bscActFlow        ned-modification-dependent

  The first line tells NCS that the bscActAdminState column must be
  "locked" when dependent columns are modified.

  The second line tells NCS that the bscActFlow is the only dependent
  column in this table.


* Running the example

  We are using the default ncs.conf, but write ncs_init.xml, with
  initial data for NCS, telling it about the three devices and how it
  should communicate with them.

  When we execute

    $ make all

  in this directory, the following will happen:

  - The package "ex-snmp-ned" is built, which invokes
    "ncsc --ncs-compile-mib-bundle", and compiles files to be used for
    the device simulation.

  - "ncs-netsim" is used to create a simulated network with three SNMP
    devices.

  Then we start the simulated network and NCS:

    $ ncs-netsim start
    $ ncs

  The NCS server is initialized with managed device data populating
  the tailf-ncs namespace with appropriate managed device data, such as
  at which IP/port each managed device resides as well as auth data,
  i.e., how do we talk to each managed device.

  Start configuring the devices by executing

    $ ncs_cli --user admin

* The example:

  Initially we have prepared the NCS configuration to speek to the 3 devices:

    admin@fat> show configuration devices device r0..2
    device r0 {
      address 127.0.0.1;
      port    11022;
      device-type {
          snmp {
              version        v1;
              snmp-authgroup default;
              mib-group      [ basic ];
          }
      }
      state {
          admin-state unlocked;
      }
    }
    device r1 {
      address 127.0.0.1;
      port    11023;
      device-type {
          snmp {
              version        v2c;
              snmp-authgroup default;
          }
      }
      state {
          admin-state unlocked;
      }
    }
    device r2 {
      address 127.0.0.1;
      port    11024;
      device-type {
          snmp {
              version        v3;
              snmp-authgroup default;
              mib-group      [ basic snmp ];
          }
      }
      state {
          admin-state unlocked;
      }
    }

  As you see, we have different versions for all three devices and a
  common authentication group.  The auth groups defines v1/v2c and v3
  authentication parameters.  For v1/v2c it is just the community
  string and for v3 it maps the NCS user to corresponding v3
  parameters.

    admin@fat> show configuration devices authgroups snmp-group default-map
    snmp-group default {
      default-map {
          community-name public;
      }
    }
    [ok][2011-12-15 15:28:31]

    admin@fat> show configuration devices authgroups snmp-group umap
    snmp-group default {
      umap admin {
          usm {
              remote-name    admin;
              security-level auth-priv;
              auth {
                  md5 {
                      remote-password $4$wIo7Yd068FRwhYYI0d4IDw==;
                  }
              }
              priv {
                  des {
                      remote-password $4$wIo7Yd068FRwhYYI0d4IDw==;
                  }
              }
          }
      }
    }
    [ok][2011-12-15 15:31:36]

  When the MIBs are compiled to NCS, read-write objects become config
  and read-only objects become operational data.  There is one
  exception, RowStatus objects becomes operational data in NCS and row
  creation is managed automatically to NCS.

  Next step is to get the config from the devices.  This will populate
  CDB with all read-write objects.

    admin@fat> request devices sync-from
    sync-result {
        device r0
        result true
    }
    sync-result {
        device r1
        result true
    }
    sync-result {
        device r2
        result true
    }
    [ok][2011-12-15 13:36:36]

    admin@fat> show configuration devices device
    device r0 {
        address 127.0.0.1;
        port    11022;
        device-type {
            snmp {
                version        v1;
                snmp-authgroup default;
                mib-group      [ basic ];
            }
        }
        state {
            admin-state unlocked;
        }
        config {
            basic-config:BASIC-CONFIG-MIB {
                bscBaseTable {
                    bscBaseEntry 1 {
                        bscBaseStr foo;
                        bscBaseErr 0;
                    }
                    bscBaseEntry 2 {
                        bscBaseStr bar;
                        bscBaseErr 0;
                    }
                }
                bscAddrTable {
                    bscAddrEntry 1 2 {
                        bscAddrStr addr1;
                    }
                    bscAddrEntry 1 4 {
                        bscAddrStr addr2;
                    }
                }
            }
        }
    }
    device r1 {
        ...
    }
    device r2 {
    ...
    }

    [ok][2011-12-15 13:42:50]

  At this point it is time to configure over SNMP.  Note that you can
  use the CLI across the different SNMP versions including v3
  authentication automatically.

  Let's set the sysContact field on all devices that support it.  To
  find out which devices implement a data model, we can run:

    admin@fat> show devices device module SNMPv2-MIB
    device r1 {
        module SNMPv2-MIB;
    }
    device r2 {
        module SNMPv2-MIB;
    }


 First set on device 1.

    admin@fat> configure
    Entering configuration mode private
    [ok][2011-12-15 13:43:06]

    admin@fat% set devices device r1 config snmpMIB:SNMPv2-MIB system sys <tab>
    Possible completions:
      sysContact  sysLocation  sysName
    admin@fat% set devices device r1 config snmpMIB:SNMPv2-MIB system sysContact wallan
    [ok][2011-12-15 13:43:37]

    Now we can see what would be sent to the device, before committing:

    admin@fat% commit dry-run outformat native
    native {
        device {
            name r1
            data set-request
                     1.3.6.1.2.1.1.4.0=wallan
        }
    }
    [ok][2011-12-15 13:43:39]

    Then we commit:

    admin@fat% commit
    Commit complete.
    [ok][2011-12-15 13:43:40]

  When the NCS transaction is committed, NCS sends SET requests
  towards the devices.  So after this commit, use snmpget towards the
  device to verify the new value:

    $ snmpget -v2c -c public 127.0.0.1:11023 sysContact.0
    SNMPv2-MIB::sysContact.0 = STRING: wallan

  Now set on 2 devices in one transaction.

    [edit]
    admin@fat% set devices device r2 config snmpMIB:SNMPv2-MIB system sysContact wallan
    [ok][2011-12-15 13:44:49]

    [edit]
    admin@fat% commit
    Commit complete.
    [ok][2011-12-15 13:44:51]

  NCS will generate rollback files for all transactions, this will store the
  inverse SNMP operation. To display the rollback file:

    admin@fat% run file show logs/rollback0
    # Created by: admin
    # Date: 2011-12-15 15:40:10
    # Via: cli
    # Type: delta
    # Label:
    # Comment:
    # No: 10016
    ....

  To undo the change of sysContact:

    admin@fat% rollback 0
    [ok][2011-12-15 15:40:42]

    [edit]
    admin@fat% commit
    Commit complete.
    [ok][2011-12-15 15:40:46]

  If you change values in the agent over SNMP by other means than NCS,
  you can compare the NCS config with the agent. If you set the
  sysContact over SNMP (using net-snmp commands or a MIB Browser) you
  can ask NCS to display the diff:

    $ snmpset -v2c -c public 127.0.0.1:11023 sysContact.0 s john

    [edit]
    admin@fat% request devices device r1 compare-config
    diff
     devices {
         device r1 {
             config {
                 snmpMIB:SNMPv2-MIB {
                     system {
    -                    sysContact wallan;
    +                    sysContact john;
                     }
                 }
             }
         }
     }

    [ok][2011-12-15 13:48:58]

  If you consider NCS to be the primary, just push the config:

    admin@fat% request devices sync-to
    sync-result {
        device r0
        result true
    }
    sync-result {
        device r1
        result true
    }
    sync-result {
        device r2
        result true
    }
    [ok][2011-12-15 13:49:15]

  NCS manages row creation using RowStatus (RFC 2580).  The CLI
  command below will create a new row in the bscActTable.

    admin@fat% set devices device r0 config basic-config:BASIC-CONFIG-MIB bscActTable bscActEntry 17 bscActOwner wallan bscActFlow 42 bscActAdminState unlocked 
    [ok][2011-12-15 13:54:12]

    [edit]
    admin@fat% compare running brief
     devices {
         device r0 {
             config {
                 basic-config:BASIC-CONFIG-MIB {
                     bscActTable {
    +                    bscActEntry 17 {
    +                        bscActOwner wallan;
    +                        bscActAdminState unlocked;
    +                        bscActFlow 42;
    +                    }
                     }
                 }
             }
         }
     }
    [ok][2011-12-15 13:54:26]

    admin@fat% revert no-confirm

  NCS also understands the dependencies between tables.  If you have an
  expansion table you need to create a row in the base table first if
  you not are referring to an existing one.  NCS will resolve these
  dependencies and do create in the right order as illustrated below.
  bscAddrTable expands bscBaseTable.

    admin@fat% set devices device r0 config basic-config:BASIC-CONFIG-MIB bscBaseTable bscBaseEntry 17 bscBaseStr seventeen        
    [ok][2011-12-15 16:06:03]

    [edit]
    admin@fat% set devices device r0 config basic-config:BASIC-CONFIG-MIB bscAddrTable bscAddrEntry 17 82 bscAddrStr expansion-demo
    [ok][2011-12-15 16:06:09]

    [edit]
    admin@fat% compare running brief
     devices {
         device r0 {
             config {
                 basic-config:BASIC-CONFIG-MIB {
                     bscBaseTable {
    +                    bscBaseEntry 17 {
    +                        bscBaseStr seventeen;
    +                    }
                     }
                     bscAddrTable {
    +                    bscAddrEntry 17 82 {
    +                        bscAddrStr expansion-demo;
    +                    }
                     }
                 }
             }
         }
     }
    [ok][2011-12-15 16:06:14]

    [edit]
    admin@fat% commit | details
    ...
    ncs: SNMP connect to "r0" 127.0.0.1:11022 (trying to get-next...)
    ncs: Device: r0 SNMP prepare - send diff to managed device
    ...
    Commit complete.
    [ok][2011-12-15 16:06:17]

  NCS manages transactions across devices even in the case of SNMP.
  If you perform a configuration transaction across several SNMP
  devices and one fails, NCS will generate the reverse operation to
  the participating devices and leave the network in the state it was.
  In this demo you can force an error by setting bscBaseErr to a
  non-zero value.  This is illustrated in the example below:

    admin@fat% set devices device r2 config basic-config:BASIC-CONFIG-MIB bscBaseTable bscBaseEntry 42 bscBaseErr 1 
    [ok][2011-12-15 18:28:09]

    [edit]

    admin@fat% commit
    Aborted: 'devices device r2 config basic-config:BASIC-CONFIG-MIB bscBaseTable bscBaseEntry 42 bscBaseErr': inconsistent value
    [error][2011-12-15 18:28:17]

    admin@fat% exit no-confirm

  NCS can also show operational data which is directly fetched from the device:

    admin@fat> show status devices device r1 live-status SNMPv2-MIB
    system {
        sysDescr        "Tail-f ConfD agent - r1";
        sysObjectID     1.3.6.1.4.1.24961;
        sysUpTime       1279481;
        sysContact      wallan;
        sysName         "";
        sysLocation     "";
        sysServices     72;
        sysORLastChange 0;
    }
    snmp {
        snmpInPkts              145;
        snmpInBadVersions       0;
        snmpInBadCommunityNames 0;
        snmpInBadCommunityUses  0;
        snmpInASNParseErrs      0;
        snmpEnableAuthenTraps   disabled;
        snmpSilentDrops         0;
        snmpProxyDrops          0;
    }
    snmpSet {
        snmpSetSerialNo 3946532;
}
    [ok][2011-12-15 14:13:54]

  A handy way to use NCS is to mediate statistics for several SNMP
  nodes.  Since NCS will manage authentication and collection it is
  easy for a performance monitoring system to retrieve the data and
  create reports.

  The example below shows how to retrieve stats from all devices over NETCONF
  using the netconf-console:

    $ netconf-console --get -x "/devices/device/live-status/SNMPv2-MIB/snmp"

    <?xml version="1.0" encoding="UTF-8"?>
    <rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="1">
      <data>
        <devices xmlns="http://tail-f.com/ns/ncs">
          <device>
            <name>r0</name>
            ...
          </device>
          <device>
            <name>r1</name>
            <live-status>
              <SNMPv2-MIB xmlns="urn:ietf:params:xml:ns:yang:smiv2:SNMPv2-MIB">
                <snmp>
                  <snmpInPkts>59</snmpInPkts>
                  <snmpInBadVersions>0</snmpInBadVersions>
                  <snmpInBadCommunityNames>0</snmpInBadCommunityNames>
                  <snmpInBadCommunityUses>0</snmpInBadCommunityUses>
                  ...
            </live-status>
          </device>
          ...
        </devices>
      </data>
    </rpc-reply>

Stopping the Example
-------------------

When you are ready with this example make sure all daemons are stopped. Stop
NCS and then the simulated network:

$ make stop

Clean all created files:

$ make clean


