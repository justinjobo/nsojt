'\" t
.\"     Title: nct
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 05/14/2024
.\"    Manual: NCS Manual
.\"    Source: Cisco Systems, Inc.
.\"  Language: English
.\"
.TH "NCT" "1" "05/14/2024" "Cisco Systems, Inc." "NCS Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
nct \- Deprecated\&. Should not be used\&. A collection of tools that can be used to install and manage NCS nodes\&.
.SH "INTRODUCTION"
.sp
A host running NCS is called an \fINCS node\fR\&. A host can be either a physical machine or a virtual machine as long as they can be accessed via SSH\&.
.sp
With nct it is possible to install and manage NCS nodes\&. This assumes that the hosts are running Linux and are accessible via SSH\&.
.SS "The hostsfile"
.sp
Each NCS node can be operated on independently but the main idea is that nct can operate on a set of NCS nodes\&. To operate on a set of NCS nodes a, so called, \fIhostsfile\fR is needed\&. A \fIhostsfile\fR consists of Host entries according to the following example:
.sp
.if n \{\
.RS 4
.\}
.nf
{"192\&.168\&.23\&.99", []}\&.
{"192\&.168\&.23\&.98", []}\&.
\&.\&.\&.etc\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
Each entry, called a \fITuple\fR, begin with a \(oq{\(cq bracket and ends with a \(oq}\&.\(cq
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Note the ending dot after the `}\&.Ã¯\(r?\(12 bracket!
.sp .5v
.RE
.sp
Each entry consists of a \fIHostname/IP\-Address\fR, enclosed in double quotes and a list of options, where the list begin with a \(oq[\(cq bracket and ends with a corresponding \(oq]\(cq bracket\&.
.sp
In the list of options, information can be given that, in most cases, have a corresponding \fIswitch\fR option to the various tool commands\&. So instead of having to specify the SSH User to every tool command with the \(oq\-\-ssh\-user\(cq switch; it can be specified in the \fIhostsfile\fR as:
.sp
.if n \{\
.RS 4
.\}
.nf
{"192\&.168\&.23\&.99", [{ssh_user,"user"}]}\&.
{"192\&.168\&.23\&.98", [{ssh_user,"user"}]}\&.
\&.\&.\&.etc\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
Each such switch is represented as a \fITuple\fR with the switch name and its value, and if it is an unary switch it is represented as just the switch name\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
The: \(oq\-\(cq in a switch corresponds to a: \(oq_\(cq in the hostsfile\&. So, for example, the switch \(oq\-\-ssh\-user\(cq correspond to \(oqssh_user\(cq in the \fIhostsfile\fR\&.
.sp .5v
.RE
.sp
Often it can be useful to be able to group a subset of the \fIHosts\fR in the hostsfile when you want to restrict an operation to only those \fIHosts\fR\&. This can be done with the group mechanism\&. Study the example below:
.sp
.if n \{\
.RS 4
.\}
.nf
{"192\&.168\&.23\&.99",[{groups,["service","london"]}, \&.\&.\&. ]}\&.
{"192\&.168\&.24\&.98",[{groups,["service","paris"]},  \&.\&.\&. ]}\&.
{"192\&.168\&.23\&.11",[{groups,["device","london"]},  \&.\&.\&. ]}\&.
{"192\&.168\&.24\&.12",[{groups,["device","paris"]},   \&.\&.\&. ]}\&.
.fi
.if n \{\
.RE
.\}
.sp
In the example above, we have 4 NCS nodes grouped into two groups named: "london" and: "paris" but also two other groups named: "service" and: "device"\&. Imagine that we may want to do certain operations only on the members in the "london" group or perhaps only on the members in the "device" group\&. This can easily be achieved by using the \(oq\-\-group\(cq switch to a NCS tools command\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
nct upgrade \-\-group paris \&.\&.\&.
nct stop \-\-group service \&.\&.\&.
nct check \-\-group london,device \-\-groupoper and \&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
In the last example we specify two groups and require the (to be) affected \fIHosts\fR to be member in both groups\&. This is controlled by the \(oq\-\-groupoper and\*(Aq switch which means that the intersection of the specified groups should yield the affected \*(AqHosts\*(Aq\&. The default of the group mechanism is to use the union if several groups are specified (`\-\-groupoper or\(cq)\&.
.PP
For a complete list of options available for a hostsfile, see
\fBnct-hostsfile\fR(1)
.SS "The use of SSH"
.sp
The NCS tools make heavy use of SSH for running commands and copying file on/to the \fIHosts\fR\&. It is possible to specify the \(oqSSH User\(cq and \(oqSSH Password\(cq to be used for each Host, either with a switch to a command or in the \fIhostsfile\fR\&. It is recommended to add the \(oqSSH Password\(cq to the \fIhostsfile\fR and prohibit other users read access to the file for security reasons\&.
.sp
It is also possible to use \(oqSSH KEYS\(cq as long as they do not require a passphrase\&.
.sp
Then, for each \fIHost\fR, setup the SSH key authentication\&. This can easily be done with the \(oqssh\-copy\-id\(cq command\&. Example:
.sp
.if n \{\
.RS 4
.\}
.nf
ssh\-copy\-id user@192\&.168\&.23\&.99
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Per default, the default filename of the SSH key pair will be used; for example \fIid_rsa\fR for RSA keys or \fIid_ed25519\fR for ED25519 keys To override this behaviour you can use the \(oq\-\-ssh\-key\-name <keyname>\(cq switch with any NCT command\&.
.sp .5v
.RE
.SS "The use of SSH and sudo"
.sp
NCT uses SSH for running remote commands, and almost all commands uses the sudo application\&. Depending on the host, NCT might be prompted for a password\&. This password will be supplied automatically by NCT if provided on the command line using the nct switch \fI\-\-sudo\-pass\fR or configured in the hostsfile as \fIsudo_pass\fR\&. If running the \fInct ssh\-cmd\fR with a command using sudo, it is important to provide the \fI\-S\fR, to force a TTY, and \fI\-p\fR, to chose a prompt NCT can match, options to sudo\&. Please refer to the \fBnct-ssh-cmd\fR(1) and \fBsudo\fR(8) for more information
.SH "VERIFY SSH ACCESS"
.sp
Assume we have a hostsfile looking like this:
.sp
.if n \{\
.RS 4
.\}
.nf
{"192\&.168\&.23\&.99",[{groups,["service","paris"]},{ssh_user,"user"}]}\&.
{"192\&.168\&.23\&.98",[{groups,["service","london"]},{ssh_user,"user"}]}\&.
{"192\&.168\&.23\&.11",[{groups,["device","paris"]},{ssh_user,"user"}]}\&.
{"192\&.168\&.23\&.12",[{groups,["device","paris"]},{ssh_user,"user"}]}\&.
{"192\&.168\&.23\&.21",[{groups,["device","london"]},{ssh_user,"user"}]}\&.
{"192\&.168\&.23\&.22",[{groups,["device","london"]},{ssh_user,"user"}]}\&.
.fi
.if n \{\
.RE
.\}
.sp
where we have setup SSH key authentication on all the hosts as explained earlier\&. The \fIHosts\fR are running Linux and the prerequisites have been installed\&.
.sp
We can now verify that the nct can access all the \fIHosts\fR using the following command:
.sp
.if n \{\
.RS 4
.\}
.nf
nct check \-\-hostsfile hostsfile \-c ssh
.fi
.if n \{\
.RE
.\}
.sp
If successful, the command may return something like:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.\&.
SSH Check to 192\&.168\&.23\&.99:22
SSH OK : \*(Aqssh uname\*(Aq returned: Linux
\&.\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
We also need to verify that we can become root on the Hosts by executing the \(oqsudo\(cq command\&. This can be checked like this:
.sp
.if n \{\
.RS 4
.\}
.nf
nct check \-\-hostsfile hostsfile \-c ssh\-sudo
.fi
.if n \{\
.RE
.\}
.sp
If successful, the command may return something like:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.\&.
SSH+SUDO Check to 192\&.168\&.23\&.99:22
SSH+SUDO OK
\&.\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
If you run the \(oqnct check\(cq without the \(oq\-c\(cq switch it will actually try to verify the following:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
SSH access
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
SUDO access
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
DISK USAGE with a configurable warning limit
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
REST interface is up
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
NETCONF interface is up
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
What NCS version is running
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Is HA enabled
.RE
.sp
It can look something like this:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.\&.
ALL Check to 192\&.168\&.22\&.99:22
SSH OK : \*(Aqssh uname\*(Aq returned: Linux
SSH+SUDO OK
DISK\-USAGE <WARNING> FileSys=/dev/sda4 (/var,/opt) Use=89%
REST OK
NETCONF OK
NCS\-VSN : 3\&.3
HA : mode=primary, node\-id=paris\-d1, connected\-secondary=paris\-d2
\&.\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
To run any Linux command on the \fIHosts\fR, use the \fInct ssh\-cmd\fR\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
nct ssh\-cmd \-\-hostsfile hostsfile \e
\-c "sudo sh \-c \*(Aqyes | /opt/ncs/current/bin/ncs\-uninstall \-\-all\*(Aq"
.fi
.if n \{\
.RE
.\}
.SH "INSTALL NCS"
.sp
Assume we have verified that SSH access works as shown above\&.
.sp
We can then install NCS on all the \fIHosts\fR like this:
.sp
.if n \{\
.RS 4
.\}
.nf
nct install \-\-hostsfile hostsfile \-\-file ncs\-3\&.3\&.linux\&.x86_64\&.installer\&.bin
.fi
.if n \{\
.RE
.\}
.sp
The command will return before the installation is completed\&. We can now check the progress by displaying the content of the install log on each of the \fIHosts\fR like this:
.sp
.if n \{\
.RS 4
.\}
.nf
nct install \-\-hostsfile hostsfile \-c check \-\-file ncs\-3\&.3\&.linux\&.x86_64\&.installer\&.bin
.fi
.if n \{\
.RE
.\}
.sp
The output, when the installation is completed will look something like this:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.\&.
Check Install of NCS to 192\&.168\&.23\&.99:22
>> Content of : /tmp/ncs\-3\&.3\&.linux\&.x86_64\&.installer\&.bin\&.log
INFO  Using temporary directory /tmp/ncs_installer\&.17571 to stage NCS installation bundle
INFO  Using /opt/ncs/ncs\-3\&.3 for static files
INFO  Unpacked ncs\-3\&.3 in /opt/ncs/ncs\-3\&.3
INFO  Found and unpacked corresponding DOCUMENTATION_PACKAGE
INFO  Found and unpacked corresponding EXAMPLE_PACKAGE
INFO  Generating default SSH hostkey (this may take some time)
INFO  SSH hostkey generated
INFO  Environment set\-up generated in /opt/ncs/ncs\-3\&.3/ncsrc
INFO  NCS installation script finished
INFO  Found and unpacked corresponding NETSIM_PACKAGE
INFO  NCS installation complete
\&.\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
Note that the first time(s) you run the \(oq\-c check\(cq command, the installation may not yet be finished and you will only see a few of the lines above\&. Then wait a short while before re\-run the command\&. When all log output show the line \(oqNCS installation complete\(cq you\(cqre done\&.
.sp
If you want to limit the check to just one (or a few hosts) you can specify them on the command line like this:
.sp
.if n \{\
.RS 4
.\}
.nf
nct install \-h 192\&.168\&.23\&.99,192\&.168\&.23\&.98 \-\-ssh\-user user \e
c check \-\-file ncs\-3\&.3\&.linux\&.x86_64\&.installer\&.bin
.fi
.if n \{\
.RE
.\}
.sp
If the installation fail, on one or several hosts, then try the following:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Do the log output give you any hint on what went wrong?
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Increase the verbosity of the command output with the
\fI\-v 2\fR
switch\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Is it possible to install ncs manually on the
\fIHost\fR
(try: sh \-c "ncs\-3\&.3\&.linux\&.x86_64\&.installer\&.bin \-\-system\-install" )\&.
.RE
.sp
If nothing works, get in contact with the nct team for more help\&.
.sp
If the installations was successful you can start NCS like this:
.sp
.if n \{\
.RS 4
.\}
.nf
nct start \-\-hostsfile hostsfile
.fi
.if n \{\
.RE
.\}
.sp
Finally, check that NCS actually is up and running:
.sp
.if n \{\
.RS 4
.\}
.nf
nct check \-\-hostsfile hostfile
.fi
.if n \{\
.RE
.\}
.SH "ADDING NEDS AND PACKAGES"
.sp
When NCS is installed and is up and running, it is time to add NEDs/packages to the systems\&. The name of a package is defined as:
.sp
.if n \{\
.RS 4
.\}
.nf
ncs\-<NCSVSN>\-<PACKAGE><VSN>\&.tar\&.gz
.fi
.if n \{\
.RE
.\}
.sp
Where \fINCSVSN\fR is the major version of NCS used to build the package, \fIPACKAGE\fR is the name of the package and \fIVSN\fR the version of the package\&.
.sp
First we need to put a package on each \fIHost\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
nct packages \-\-hostsfile hostsfile \-c fetch \e
\-\-file ncs\-3\&.3\-tailf\-hcc\-3\&.0\&.8\&.tar\&.gz
.fi
.if n \{\
.RE
.\}
.sp
If successful, the output could look like this:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.\&.
Fetch Package at 192\&.168\&.23\&.99:8080
OK
\&.\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
To check the package status we can run:
.sp
.if n \{\
.RS 4
.\}
.nf
nct packages \-\-hostsfile hostsfile
.fi
.if n \{\
.RE
.\}
.sp
Which may result in the following output:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.\&.
Package Info at 192\&.168\&.22\&.99:8080
ncs\-3\&.3\-tailf\-hcc\-3\&.0\&.8 (installable)
\&.\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
The status information above, shown between the parentheses, can take on one of the following values:
.PP
installable
.RS 4
The package is ready to be installed
.RE
.PP
installed
.RS 4
The package has been installed
.RE
.PP
loaded
.RS 4
The package has been loaded into the NCS node
.RE
.sp
To install the package we can run:
.sp
.if n \{\
.RS 4
.\}
.nf
nct packages \-\-hostsfile hostsfile \-c install \e
\-\-package ncs\-3\&.3\-tailf\-hcc\-3\&.0\&.8
.fi
.if n \{\
.RE
.\}
.sp
If we again check the status, we will see the following:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.\&.
Package Info at 192\&.168\&.22\&.99:8080
ncs\-3\&.3\-tailf\-hcc\-3\&.0\&.8 (installed)
\&.\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
What remains is to actually load the package into the NCS node, which we can do like this:
.sp
.if n \{\
.RS 4
.\}
.nf
nct packages \-\-hostsfile hostsfile \-c reload
.fi
.if n \{\
.RE
.\}
.sp
And if the reload is successful we may get in return:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.\&.
Reload Packages at 192\&.168\&.22\&.99:8080
tailf\-hcc            true
\&.\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
In case the reload would fail we would get something like:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.\&.
Reload Packages at 192\&.168\&.22\&.99:8080
tailf\-hcc            false \&.\&.\&.some text here\&.\&.\&.
\&.\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
If we yet again check the status, we will see the following:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.\&.
Package Info at 192\&.168\&.22\&.99:8080
tailf\-hcc\-3\&.0\&.8 (loaded)
ncs\-3\&.3\-tailf\-hcc\-3\&.0\&.8 (installed)
\&.\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
It is of course possible to deinstall a package:
.sp
.if n \{\
.RS 4
.\}
.nf
nct packages \-\-hostsfile hostsfile \-c deinstall \e
\-\-package ncs\-3\&.3\-tailf\-hcc\-3\&.0\&.8
.fi
.if n \{\
.RE
.\}
.sp
A status check will reveal the following:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.\&.
Package Info at 192\&.168\&.22\&.99:8080
tailf\-hcc\-3\&.0\&.8 (loaded)
ncs\-3\&.3\-tailf\-hcc\-3\&.0\&.8 (installable)
\&.\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
As you can see, the package is still loaded, to unload it we need to do a \fIreload\fR again:
.sp
.if n \{\
.RS 4
.\}
.nf
nct packages \-\-hostsfile hostsfile \-c reload
.fi
.if n \{\
.RE
.\}
.sp
A final status check will now show us this:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.\&.
Package Info at 192\&.168\&.22\&.99:8080
ncs\-3\&.3\-tailf\-hcc\-3\&.0\&.8 (installable)
\&.\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.SS "Upgrade a NED/package"
.sp
When to upgrade a package to a new version it is recommended to first make an NCS backup:
.sp
.if n \{\
.RS 4
.\}
.nf
nct backup \-\-hostsfile hostsfile
.fi
.if n \{\
.RE
.\}
.sp
The result output may look something like:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.\&.
SSH Check to 192\&.168\&.23\&.22:22
SSH OK : \*(Aqssh sudo /opt/ncs/current/bin/ncs\-backup \-\-non\-interactive\*(Aq \e
returned: INFO  Backup /var/opt/ncs/backups/ncs\-3\&.3@2014\-12\-05T19:47:58\&.backup\e
created successfully
\&.\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
As the header of the output above reveal, the \(oqnct backup\(cq command is really just using the versatile \(oqnct check\(cq command to execute the NCS backup command\&. The important part to note however is the path to the successfully created backup file\&.
.sp
After this successful NCS backup we can upgrade a NED package as:
.sp
.if n \{\
.RS 4
.\}
.nf
nct packages \-\-hostsfile hostsfile \-c deinstall \e
\-\-package ncs\-3\&.3\-tailf\-hcc\-3\&.0\&.8

nct packages \-\-hostsfile hostsfile \-c fetch \e
\-\-file ncs\-3\&.3\-tailf\-hcc\-3\&.0\&.9\&.tar\&.gz

nct packages \-\-hostsfile hostsfile \-c install \e
\-\-package ncs\-3\&.3\-tailf\-hcc\-3\&.0\&.9

nct packages \-\-hostsfile hostsfile \-c reload
.fi
.if n \{\
.RE
.\}
.SH "UPGRADING NCS"
.sp
When upgrading NCS to another version we make use of the \(oqnct upgrade\(cq command\&. This command will perform the following actions:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Assert the given NCS version really is installed on the
\fIHost\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Assert that given NCS version isn\*(Aqt already running\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Make sure that there exist \(oqinstallable\(cq packages that corresponds to the (old) already installed packages\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Backup NCS (default action, but optional)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Deinstall the old packages, then install the new packages\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Stop NCS
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Rearrange the symlinks under
\fI/opt/ncs\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Start NCS (default is to also reload all packages, but optional)
.RE
.sp
Invoking it can look something like this:
.sp
.if n \{\
.RS 4
.\}
.nf
nct upgrade \-\-hostsfile hostsfile \-\-ncs\-vsn 3\&.2\&.1\&.1
.fi
.if n \{\
.RE
.\}
.sp
and the corresponding output can look like this:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.\&.
Upgrade NCS to 192\&.168\&.23\&.99
OK : upgrade done
\&.\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
In case we do a major version upgrade, let\(cqs say from 3\&.3 to 3\&.4, the command will make sure that all 3\&.3 packages are uninstalled before the upgrade can take place\&. Example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nct upgrade \-\-hostsfile hostsfile \-\-ncs\-vsn 3\&.4
.fi
.if n \{\
.RE
.\}
.sp
which may result in an error like this:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.\&.
ERROR: packages that need to be uninstalled on 192\&.168\&.23\&.99:
ncs\-3\&.3\-modok\-1\&.0
\&.\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
The remedy to this is to first run the \(oqnct packages\(cq command to \(oqdeinstall\(cq the old packages, before doing the upgrade\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
It is very important that any corresponding new packages are installed before the upgrade is performed\&. If not, you will loose all the package specific configuration at reload of the NCS packages\&.
.sp .5v
.RE
.SH "INSTALLING BEAM PATCHES"
.sp
It is possible to patch NCS with, so called, \(oq\&.beam\(cq files that are updated versions of NCS internal (binary) program code\&.
.sp
Let\(cqs say we want to install a patch file named: \(oqrest\&.beam\(cq\&. It can look like this:
.sp
.if n \{\
.RS 4
.\}
.nf
nct patch \-\-hostsfile hostsfile \-\-file rest\&.beam
.fi
.if n \{\
.RE
.\}
.sp
and the corresponding output:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.\&.
Install NCS patch to 192\&.168\&.23\&.99
>> OK
\&.\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
To see which patches that are installed you can use the \(oq\-c show\(cq switch like this:
.sp
.if n \{\
.RS 4
.\}
.nf
nct patch \-\-hostsfile hostsfile \-c show
.fi
.if n \{\
.RE
.\}
.sp
and the output looks something like this:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.\&.
Show loaded NCS patches to 192\&.168\&.23\&.99
NAME         VERSION                           COMPILE TIME
\- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \-
rest         41da353169d431bbbf5417b85e5d0d06  26\-Nov\-2014::12:56:11
\&.\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
To remove a patch (and reload the original code), use the \(oq\-c remove\(cq switch like this:
.sp
.if n \{\
.RS 4
.\}
.nf
nct patch \-\-hostsfile hostsfile \-\-file rest\&.beam \-c remove
.fi
.if n \{\
.RE
.\}
.SH "RUNNING CLI COMMANDS"
.sp
It is possible to run any NCS CLI command over a set of NCS nodes\&. For example, to list all cleared alarms on a group of nodes:
.sp
.if n \{\
.RS 4
.\}
.nf
nct cli\-cmd \-\-hostsfile hostsfile \-\-group paris \e
\-c "show alarms alarm\-list alarm ncs * * * is\-cleared"
.fi
.if n \{\
.RE
.\}
.SH "OPERATE ON HA NODES"
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
This command requires the HA Controller: \(oqtailf\-hcc\(cq, and a working HA configuration\&. You can read more about NCS High Availability feature in the User Guide for NCS, and in the deployment document for tailf\-hcc\&.
.sp .5v
.RE
.sp
This command allows you to perform actions available in the tailf\-hcc package\&.
.sp
For example, you can activate your HA environment with the command:
.sp
.if n \{\
.RS 4
.\}
.nf
nct ha \-\-action cluster\-activate \-\-hostsfile hostsfile \-\-group service
.fi
.if n \{\
.RE
.\}
.SH "MOVE A DEVICE BETWEEN NCS NODES"
.sp
The \(oqnct move\-device\(cq is a command for moving a device managed by one NCS node, to another NCS node, both in a cluster setup and a non\-cluster setup\&.
.sp
This command requires a hostsfile, which must contain the (cluster) topology\&. Each host in the hostsfile requires the option {name,<name>}, each device node requires the option {service_node,<name>} and each service node requires the option {device_nodes,[{<name>,<remote\-name>} \&...]}, where <name> is a unique identifier for the node in the hostsfile and <remote\-name> the configured name for the cluster remote\-node on the service nodes\&.
.sp
A valid configuration for a service node and a device node would look something like this:
.sp
.if n \{\
.RS 4
.\}
.nf
{"192\&.168\&.23\&.99",
[{name,"pariss"},
{device_nodes,[{"parisd1","d1"},{"parisd2","d2"}]}]}\&.

{"192\&.168\&.23\&.11",
[{name,"parisd1"},
{service_node,"pariss"}]}\&.
.fi
.if n \{\
.RE
.\}
.sp
The command is executed like this:
.sp
.if n \{\
.RS 4
.\}
.nf
nct move\-device \-\-from parisd1 \-to parisd2 \e
\-\-device m0 \-\-hostfile hostfile
.fi
.if n \{\
.RE
.\}
.sp
Node \fIparisd1\fR and \fIparisd2\fR are two NCS device nodes\&.
.SH "MAN PAGES"
.sp
Each nct command has a corresponding man page\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
man nct\-install
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.PP
\fBnct-backup\fR(1)
.PP
\fBnct-check\fR(1)
.PP
\fBnct-cli-cmd\fR(1)
.PP
\fBnct-copy\fR(1)
.PP
\fBnct-get-logs\fR(1)
.PP
\fBnct-ha\fR(1)
.PP
\fBnct-install\fR(1)
.PP
\fBnct-load-config\fR(1)
.PP
\fBnct-move-device\fR(1)
.PP
\fBnct-packages\fR(1)
.PP
\fBnct-patch\fR(1)
.PP
\fBnct-ssh-cmd\fR(1)
.PP
\fBnct-start\fR(1)
.PP
\fBnct-stop\fR(1)
.PP
\fBnct-upgrade\fR(1)
.SH "AUTHOR"
.br
.RS 4
Author.
.RE
.SH "COPYRIGHT"
.br
Copyright \(co 2021, 2022, 2023, 2024 Cisco Systems, Inc. All rights reserved.
.br
